{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyTorch Metric Learning","text":""},{"location":"#google-colab-examples","title":"Google Colab Examples","text":"<p>See the examples folder for notebooks you can download or run on Google Colab.</p>"},{"location":"#overview","title":"Overview","text":"<p>This library contains 9 modules, each of which can be used independently within your existing codebase, or combined together for a complete train/test workflow.</p> <p></p>"},{"location":"#how-loss-functions-work","title":"How loss functions work","text":""},{"location":"#using-losses-and-miners-in-your-training-loop","title":"Using losses and miners in your training loop","text":"<p>Let\u2019s initialize a plain TripletMarginLoss: <pre><code>from pytorch_metric_learning import losses\nloss_func = losses.TripletMarginLoss()\n</code></pre></p> <p>To compute the loss in your training loop, pass in the embeddings computed by your model, and the corresponding labels. The embeddings should have size (N, embedding_size), and the labels should have size (N), where N is the batch size.</p> <pre><code># your training loop\nfor i, (data, labels) in enumerate(dataloader):\n    optimizer.zero_grad()\n    embeddings = model(data)\n    loss = loss_func(embeddings, labels)\n    loss.backward()\n    optimizer.step()\n</code></pre> <p>The TripletMarginLoss computes all possible triplets within the batch, based on the labels you pass into it. Anchor-positive pairs are formed by embeddings that share the same label, and anchor-negative pairs are formed by embeddings that have different labels. </p> <p>Sometimes it can help to add a mining function: <pre><code>from pytorch_metric_learning import miners, losses\nminer = miners.MultiSimilarityMiner()\nloss_func = losses.TripletMarginLoss()\n\n# your training loop\nfor i, (data, labels) in enumerate(dataloader):\n    optimizer.zero_grad()\n    embeddings = model(data)\n    hard_pairs = miner(embeddings, labels)\n    loss = loss_func(embeddings, labels, hard_pairs)\n    loss.backward()\n    optimizer.step()\n</code></pre> In the above code, the miner finds positive and negative pairs that it thinks are particularly difficult. Note that even though the TripletMarginLoss operates on triplets, it\u2019s still possible to pass in pairs. This is because the library automatically converts pairs to triplets and triplets to pairs, when necessary.</p>"},{"location":"#customizing-loss-functions","title":"Customizing loss functions","text":"<p>Loss functions can be customized using distances, reducers, and regularizers. In the diagram below, a miner finds the indices of hard pairs within a batch. These are used to index into the distance matrix, computed by the distance object. For this diagram, the loss function is pair-based, so it computes a loss per pair. In addition, a regularizer has been supplied, so a regularization loss is computed for each embedding in the batch. The per-pair and per-element losses are passed to the reducer, which (in this diagram) only keeps losses with a high value. The averages are computed for the high-valued pair and element losses, and are then added together to obtain the final loss.</p> <p></p> <p>Now here's an example of a customized TripletMarginLoss: <pre><code>from pytorch_metric_learning.distances import CosineSimilarity\nfrom pytorch_metric_learning.reducers import ThresholdReducer\nfrom pytorch_metric_learning.regularizers import LpRegularizer\nfrom pytorch_metric_learning import losses\nloss_func = losses.TripletMarginLoss(distance = CosineSimilarity(), \n                                    reducer = ThresholdReducer(high=0.3), \n                                    embedding_regularizer = LpRegularizer())\n</code></pre> This customized triplet loss has the following properties:</p> <ul> <li>The loss will be computed using cosine similarity instead of Euclidean distance.</li> <li>All triplet losses that are higher than 0.3 will be discarded.</li> <li>The embeddings will be L2 regularized.  </li> </ul>"},{"location":"#using-loss-functions-for-unsupervised-self-supervised-learning","title":"Using loss functions for unsupervised / self-supervised learning","text":"<p>A <code>SelfSupervisedLoss</code> wrapper is provided for self-supervised learning:</p> <pre><code>from pytorch_metric_learning.losses import SelfSupervisedLoss\nloss_func = SelfSupervisedLoss(TripletMarginLoss())\n\n# your training for-loop\nfor i, data in enumerate(dataloader):\n    optimizer.zero_grad()\n    embeddings = your_model(data)\n    augmented = your_model(your_augmentation(data))\n    loss = loss_func(embeddings, augmented)\n    loss.backward()\n    optimizer.step()\n</code></pre> <p>If you're interested in MoCo-style self-supervision, take a look at the MoCo on CIFAR10 notebook. It uses CrossBatchMemory to implement the momentum encoder queue, which means you can use any tuple loss, and any tuple miner to extract hard samples from the queue.</p>"},{"location":"#highlights-of-the-rest-of-the-library","title":"Highlights of the rest of the library","text":"<ul> <li>For a convenient way to train your model, take a look at the trainers.</li> <li>Want to test your model's accuracy on a dataset? Try the testers.</li> <li>To compute the accuracy of an embedding space directly, use AccuracyCalculator.</li> </ul> <p>If you're short of time and want a complete train/test workflow, check out the example Google Colab notebooks.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#required-pytorch-version","title":"Required PyTorch version","text":"<ul> <li><code>pytorch-metric-learning &gt;= v0.9.90</code> requires <code>torch &gt;= 1.6</code></li> <li><code>pytorch-metric-learning &lt; v0.9.90</code> doesn't have a version requirement, but was tested with <code>torch &gt;= 1.2</code></li> </ul>"},{"location":"#pip","title":"Pip","text":"<pre><code>pip install pytorch-metric-learning\n</code></pre> <p>To get the latest dev version: <pre><code>pip install pytorch-metric-learning --pre\n</code></pre></p> <p>To install on Windows: <pre><code>pip install torch===1.6.0 torchvision===0.7.0 -f https://download.pytorch.org/whl/torch_stable.html\npip install pytorch-metric-learning\n</code></pre></p> <p>To install with evaluation and logging capabilities (This will install the unofficial pypi version of faiss-gpu): <pre><code>pip install pytorch-metric-learning[with-hooks]\n</code></pre></p> <p>To install with evaluation and logging capabilities (CPU) (This will install the unofficial pypi version of faiss-cpu): <pre><code>pip install pytorch-metric-learning[with-hooks-cpu]\n</code></pre></p>"},{"location":"#conda","title":"Conda","text":"<pre><code>conda install -c conda-forge pytorch-metric-learning\n</code></pre> <p>To use the testing module, you'll need faiss, which can be installed via conda as well. See the installation instructions for faiss.</p>"},{"location":"accuracy_calculation/","title":"Accuracy Calculation","text":"<p>The AccuracyCalculator class computes several accuracy metrics given a query and reference embeddings. It can be easily extended to create custom accuracy metrics.</p> <pre><code>from pytorch_metric_learning.utils.accuracy_calculator import AccuracyCalculator\nAccuracyCalculator(include=(),\n                    exclude=(),\n                    avg_of_avgs=False,\n                    return_per_class=False,\n                    k=None,\n                    label_comparison_fn=None,\n                    device=None,\n                    knn_func=None,\n                    kmeans_func=None)\n</code></pre>"},{"location":"accuracy_calculation/#parameters","title":"Parameters","text":"<ul> <li>include: Optional. A list or tuple of strings, which are the names of metrics you want to calculate. If left empty, all default metrics will be calculated.</li> <li>exclude: Optional. A list or tuple of strings, which are the names of metrics you do not want to calculate.</li> <li>avg_of_avgs: If True, the average accuracy per class is computed, and then the average of those averages is returned. This can be useful if your dataset has unbalanced classes. If False, the global average will be returned.</li> <li>return_per_class: If True, the average accuracy per class is computed and returned.</li> <li>k: The number of nearest neighbors that will be retrieved for metrics that require k-nearest neighbors. The allowed values are:<ul> <li><code>None</code>. This means k will be set to the total number of reference embeddings.</li> <li>An integer greater than 0. This means k will be set to the input integer.</li> <li><code>\"max_bin_count\"</code>. This means k will be set to <code>max(bincount(reference_labels)) - self_count</code> where <code>self_count == 1</code> if the query and reference embeddings come from the same source.</li> </ul> </li> <li>label_comparison_fn: A function that compares two torch arrays of labels and returns a boolean array. The default is <code>torch.eq</code>. If a custom function is used, then you must exclude clustering based metrics (\"NMI\" and \"AMI\"). The example below shows a custom function for two-dimensional labels. It returns <code>True</code> if the 0th column matches, and the 1st column does not match.</li> <li>device: The device to move input tensors to. If <code>None</code>, will default to GPUs if available.</li> <li>knn_func: A callable that takes in 4 arguments (<code>query, k, reference, ref_includes_query</code>) and returns <code>distances, indices</code>. Default is <code>pytorch_metric_learning.utils.inference.FaissKNN</code>.</li> <li>kmeans_func: A callable that takes in 2 arguments (<code>x, nmb_clusters</code>) and returns a 1-d tensor of cluster assignments. Default is <code>pytorch_metric_learning.utils.inference.FaissKMeans</code>. <pre><code>from pytorch_metric_learning.distances import SNRDistance\nfrom pytorch_metric_learning.utils.inference import CustomKNN\n\ndef example_label_comparison_fn(x, y):\n    return (x[:, 0] == y[:, 0]) &amp; (x[:, 1] != y[:, 1])\n\nknn_func = CustomKNN(SNRDistance())\nAccuracyCalculator(exclude=(\"NMI\", \"AMI\"), \n                    label_comparison_fn=example_label_comparison_fn,\n                    knn_func=knn_func)\n</code></pre></li> </ul>"},{"location":"accuracy_calculation/#getting-accuracy","title":"Getting accuracy","text":"<p>Call the <code>get_accuracy</code> method to obtain a dictionary of accuracies. <pre><code>def get_accuracy(self, \n    query,\n    query_labels,       \n    reference=None,\n    reference_labels=None, \n    ref_includes_query=False, \n    include=(),\n    exclude=()\n):\n# returns a dictionary mapping from metric names to accuracy values\n# The default metrics are:\n# \"NMI\" (Normalized Mutual Information)\n# \"AMI\" (Adjusted Mutual Information)\n# \"precision_at_1\"\n# \"r_precision\"\n# \"mean_average_precision_at_r\"\n</code></pre></p> <ul> <li>query: A 2D torch or numpy array of size <code>(Nq, D)</code>, where Nq is the number of query samples. For each query sample, nearest neighbors are retrieved and accuracy is computed.</li> <li>query_labels: A 1D torch or numpy array of size <code>(Nq)</code>. Each element should be an integer representing the sample's label.</li> <li>reference: A 2D torch or numpy array of size <code>(Nr, D)</code>, where Nr is the number of reference samples. This is where nearest neighbors are retrieved from.</li> <li>reference_labels: A 1D torch or numpy array of size <code>(Nr)</code>. Each element should be an integer representing the sample's label. </li> <li>ref_includes_query: Set to True if <code>query</code> is a subset of <code>reference</code> or if <code>query is reference</code>. Set to False otherwise.</li> <li>include: Optional. A list or tuple of strings, which are the names of metrics you want to calculate. If left empty, all metrics specified during initialization will be calculated.</li> <li>exclude: Optional. A list or tuple of strings, which are the names of metrics you do not want to calculate.</li> </ul> <p>Note that labels can be 2D if a custom label comparison function is used.</p>"},{"location":"accuracy_calculation/#lone-query-labels","title":"Lone query labels","text":"<p>If some query labels don't appear in the reference set, then it's impossible for those labels to have non-zero k-nn accuracy. Zero accuracy for these labels doesn't indicate anything about the quality of the embedding space. So these lone query labels are excluded from k-nn based accuracy calculations.</p> <p>For example, if the input <code>query_labels</code> is <code>[0,0,1,1]</code> and <code>reference_labels</code> is <code>[1,1,1,2,2]</code>, then 0 is considered a lone query label.</p>"},{"location":"accuracy_calculation/#cpugpu-usage","title":"CPU/GPU usage","text":"<ul> <li>If you installed <code>faiss-cpu</code> then the CPU will always be used.</li> <li>If you installed <code>faiss-gpu</code>, then the GPU will be used if <code>k &lt;= 1024</code> for CUDA &lt; 9.5, and <code>k &lt;= 2048</code> for CUDA &gt;= 9.5. If this condition is not met, then the CPU will be used. </li> </ul> <p>If your dataset is large, you might find the k-nn search is very slow. This is because the default behavior is to set k to <code>len(reference_embeddings)</code>. To avoid this, you can set k to a number, like <code>k = 1000</code>, or try <code>k = \"max_bin_count\"</code>.</p>"},{"location":"accuracy_calculation/#explanations-of-the-default-accuracy-metrics","title":"Explanations of the default accuracy metrics","text":"<ul> <li> <p>AMI: </p> <ul> <li>scikit-learn article</li> <li>Wikipedia</li> </ul> </li> <li> <p>NMI:</p> <ul> <li>scikit-learn article</li> <li>Slides from Northeastern University</li> </ul> </li> <li> <p>mean_average_precision:</p> <ul> <li>Slides from Stanford</li> </ul> </li> <li> <p>mean_average_precision_at_r:</p> <ul> <li>See section 3.2 of A Metric Learning Reality Check</li> </ul> </li> <li> <p>mean_reciprocal_rank:</p> <ul> <li>Slides from Stanford</li> </ul> </li> <li> <p>precision_at_1:</p> <ul> <li>Fancy way of saying \"is the 1st nearest neighbor correct?\"</li> </ul> </li> <li> <p>r_precision:</p> <ul> <li>See chapter 8 (page 161) of Introduction to Information Retrieval</li> </ul> </li> </ul> <p>Important note</p> <p>AccuracyCalculator's <code>mean_average_precision_at_r</code> and <code>r_precision</code> are correct only if <code>k = None</code>, or <code>k = \"max_bin_count\"</code>, or <code>k &gt;= max(bincount(reference_labels))</code></p>"},{"location":"accuracy_calculation/#adding-custom-accuracy-metrics","title":"Adding custom accuracy metrics","text":"<p>Let's say you want to use the existing metrics but also compute precision @ 2, and a fancy mutual info method. You can extend the existing class, and write methods that start with the keyword <code>calculate_</code></p> <pre><code>from pytorch_metric_learning.utils import accuracy_calculator\n\nclass YourCalculator(accuracy_calculator.AccuracyCalculator):\n    def calculate_precision_at_2(self, knn_labels, query_labels, **kwargs):\n        return accuracy_calculator.precision_at_k(knn_labels, query_labels[:, None], 2)\n\n    def calculate_fancy_mutual_info(self, query_labels, cluster_labels, **kwargs):\n        return fancy_computations\n\n    def requires_clustering(self):\n        return super().requires_clustering() + [\"fancy_mutual_info\"] \n\n    def requires_knn(self):\n        return super().requires_knn() + [\"precision_at_2\"] \n</code></pre> <p>Any method that starts with \"calculate_\" will be passed the following kwargs: <pre><code>kwargs = {\"query\": query,                    # query embeddings\n    \"reference\": reference,                  # reference embeddings\n    \"query_labels\": query_labels,        \n    \"reference_labels\": reference_labels,\n    \"ref_includes_query\": e}  # True if query is reference, or if query is a subset of reference.\n</code></pre></p> <p>If your method requires a k-nearest neighbors search, then append your method's name to the <code>requires_knn</code> list, as shown in the above example. If any of your accuracy methods require k-nearest neighbors, they will also receive the following kwargs:</p> <pre><code>    {\"label_counts\": label_counts,           # A dictionary mapping from reference labels to the number of times they occur\n    \"knn_labels\": knn_labels,                # A 2d array where each row is the labels of the nearest neighbors of each query. The neighbors are retrieved from the reference set\n    \"knn_distances\": knn_distances           # The euclidean distance corresponding to each k-nearest neighbor in knn_labels\n    \"lone_query_labels\": lone_query_labels   # The set of labels (in the form of a torch array) that have only 1 occurrence in reference_labels\n    \"not_lone_query_mask\": not_lone_query_mask} # A boolean mask, where True means that a query element has at least 1 possible neighbor in reference.           \n</code></pre> <p>If your method requires cluster labels, then append your method's name to the <code>requires_clustering</code> list, as shown in the above example. Then, if any of your methods need cluster labels, <code>self.get_cluster_labels()</code> will be called, and the kwargs will include:</p> <pre><code>    {\"cluster_labels\": cluster_labels} # A 1D array with a cluster label for each element in the query embeddings.\n</code></pre> <p>Now when <code>get_accuracy</code> is called, the returned dictionary will contain <code>precision_at_2</code> and <code>fancy_mutual_info</code>: <pre><code>calculator = YourCalculator()\nacc_dict = calculator.get_accuracy(query_embeddings,\n    query_labels,\n    reference_embeddings,\n    reference_labels,\n    ref_includes_query=True\n)\n# Now acc_dict contains the metrics \"precision_at_2\" and \"fancy_mutual_info\"\n# in addition to the original metrics from AccuracyCalculator\n</code></pre></p> <p>You can use your custom calculator with the tester classes as well, by passing it in as an init argument. (By default, the testers use AccuracyCalculator.) <pre><code>from pytorch_metric_learning import testers\nt = testers.GlobalEmbeddingSpaceTester(..., accuracy_calculator=YourCalculator())\n</code></pre></p>"},{"location":"accuracy_calculation/#using-a-custom-label-comparison-function","title":"Using a custom label comparison function","text":"<p>If you define your own <code>label_comparison_fn</code>, then <code>query_labels</code> and <code>reference_labels</code> can be 1D or 2D, and consist of integers or floating point numbers, as long as your <code>label_comparison_fn</code> can process them.</p> <p>Example of 2D labels: <pre><code>def label_comparison_fn(x, y):\n    return (x[..., 0] == y[..., 0]) &amp; (x[..., 1] != y[..., 1])\n\n# these are valid labels\nlabels = torch.tensor([\n    (1, 3),\n    (7, 4),\n    (1, 4),\n    (1, 5),\n    (1, 6),\n])\n</code></pre></p> <p>Example of floating point labels: <pre><code>def label_comparison_fn(x, y):\n    return torch.abs(x - y) &lt; 1\n\n# these are valid labels\nlabels = torch.tensor([\n    10.0,\n    0.03,\n    0.04,\n    0.05,\n])\n</code></pre></p>"},{"location":"common_functions/","title":"Common Functions","text":""},{"location":"common_functions/#logger","title":"LOGGER","text":"<p>This is the logger that is used everywhere in this library. <pre><code>from pytorch_metric_learning.utils import common_functions as c_f\nc_f.LOGGER.info(\"Using the PML logger\")\n</code></pre></p>"},{"location":"common_functions/#logger_name","title":"LOGGER_NAME","text":"<p>The default logger name is <code>\"PML\"</code>. You can set the logging level for just this library: <pre><code>import logging\nfrom pytorch_metric_learning.utils import common_functions as c_f\nlogging.basicConfig()\nlogging.getLogger(c_f.LOGGER_NAME).setLevel(logging.INFO)\n</code></pre></p>"},{"location":"common_functions/#set_logger_name","title":"set_logger_name","text":"<p>Allows you to change <code>LOGGER_NAME</code> <pre><code>from pytorch_metric_learning.utils import common_functions as c_f\nc_f.set_logger_name(\"DOGS\")\nc_f.LOGGER.info(\"Hello\") # prints INFO:DOGS:Hello\n</code></pre></p>"},{"location":"common_functions/#collect_stats","title":"COLLECT_STATS","text":"<p>Default value is <code>False</code>. This is used by all distances, losses, miners, reducers, and regularizers. Set this to <code>True</code> if you want to turn on all statistics collection. <pre><code>from pytorch_metric_learning.utils import common_functions as c_f\nc_f.COLLECT_STATS = True\n</code></pre></p>"},{"location":"common_functions/#numpy_random","title":"NUMPY_RANDOM","text":"<p>Default value is <code>np.random</code>. This is used anytime a numpy random function is needed. You can set it to something else if you want <pre><code>import numpy as np\nfrom pytorch_metric_learning.utils import common_functions as c_f\nc_f.NUMPY_RANDOM = np.random.RandomState(42)\n</code></pre></p>"},{"location":"common_functions/#torchinitwrapper","title":"TorchInitWrapper","text":"<p>A simpler wrapper to convert the torch weight initialization functions into class form, which can then be applied within loss functions. </p> <p>Example usage: <pre><code>from pytorch_metric_learning.utils import common_functions as c_f\nimport torch\n\n# use kaiming_uniform, with a=1 and mode='fan_out'\nweight_init_func = c_f.TorchInitWrapper(torch.nn.kaiming_uniform_, a=1, mode='fan_out')\nloss_func = SomeClassificationLoss(..., weight_init_func=weight_init_func)\n</code></pre></p>"},{"location":"distances/","title":"Distances","text":"<p>Distance classes compute pairwise distances/similarities between input embeddings.</p> <p>Consider the TripletMarginLoss in its default form: <pre><code>from pytorch_metric_learning.losses import TripletMarginLoss\nloss_func = TripletMarginLoss(margin=0.2)\n</code></pre> This loss function attempts to minimize [dap - dan + margin]+.</p> <p>Typically, dap and dan represent Euclidean or L2 distances. But what if we want to use a squared L2 distance, or an unnormalized L1 distance, or a completely different distance measure like signal-to-noise ratio? With the distances module, you can try out these ideas easily: <pre><code>### TripletMarginLoss with squared L2 distance ###\nfrom pytorch_metric_learning.distances import LpDistance\nloss_func = TripletMarginLoss(margin=0.2, distance=LpDistance(power=2))\n\n### TripletMarginLoss with unnormalized L1 distance ###\nloss_func = TripletMarginLoss(margin=0.2, distance=LpDistance(normalize_embeddings=False, p=1))\n\n### TripletMarginLoss with signal-to-noise ratio###\nfrom pytorch_metric_learning.distances import SNRDistance\nloss_func = TripletMarginLoss(margin=0.2, distance=SNRDistance())\n</code></pre></p> <p>You can also use similarity measures rather than distances, and the loss function will make the necessary adjustments: <pre><code>### TripletMarginLoss with cosine similarity##\nfrom pytorch_metric_learning.distances import CosineSimilarity\nloss_func = TripletMarginLoss(margin=0.2, distance=CosineSimilarity())\n</code></pre> With a similarity measure, the TripletMarginLoss internally swaps the anchor-positive and anchor-negative terms: [san - sap + margin]+. In other words, it will try to make the anchor-negative similarities smaller than the anchor-positive similarities.</p> <p>All losses, miners, and regularizers accept a <code>distance</code> argument. So you can try out the <code>MultiSimilarityMiner</code> using <code>SNRDistance</code>, or the <code>NTXentLoss</code> using <code>LpDistance(p=1)</code> and so on. Note that some losses/miners/regularizers have restrictions on the type of distances they can accept. For example, some classification losses only allow <code>CosineSimilarity</code> or <code>DotProductSimilarity</code> as their distance measure between embeddings and weights. To view restrictions for specific loss functions, see the losses page</p>"},{"location":"distances/#basedistance","title":"BaseDistance","text":"<p>All distances extend this class and therefore inherit its <code>__init__</code> parameters.</p> <pre><code>distances.BaseDistance(collect_stats = False,\n                        normalize_embeddings=True, \n                        p=2, \n                        power=1, \n                        is_inverted=False)\n</code></pre> <p>Parameters:</p> <ul> <li>collect_stats: If True, will collect various statistics that may be useful to analyze during experiments. If False, these computations will be skipped. Want to make <code>True</code> the default? Set the global COLLECT_STATS flag.</li> <li>normalize_embeddings: If True, embeddings will be normalized to have an Lp norm of 1, before the distance/similarity matrix is computed.</li> <li>p: The distance norm.</li> <li>power: If not 1, each element of the distance/similarity matrix will be raised to this power.</li> <li>is_inverted: Should be set by child classes. If False, then small values represent embeddings that are close together. If True, then large values represent embeddings that are similar to each other.</li> </ul> <p>Required Implementations: <pre><code># Must return a matrix where mat[j,k] represents \n# the distance/similarity between query_emb[j] and ref_emb[k]\ndef compute_mat(self, query_emb, ref_emb):\n    raise NotImplementedError\n\n# Must return a tensor where output[j] represents \n# the distance/similarity between query_emb[j] and ref_emb[j]\ndef pairwise_distance(self, query_emb, ref_emb):\n    raise NotImplementedError\n</code></pre></p>"},{"location":"distances/#batcheddistance","title":"BatchedDistance","text":"<p>Computes distance matrices iteratively, passing each matrix into <code>iter_fn</code>.</p> <pre><code>distances.BatchedDistance(distance, iter_fn=None, batch_size=32)\n</code></pre> <p>Parameters:</p> <ul> <li>distance: The wrapped distance function.</li> <li>iter_fn: This function will be called at every iteration. It receives <code>(mat, s, e)</code> as input, where <code>mat</code> is the current distance matrix, and <code>s, e</code> is the range of query embeddings used to construct <code>mat</code>.</li> <li>batch_size: Each distance matrix will be size <code>(batch_size, len(ref_emb))</code>.</li> </ul> <p>Example usage: <pre><code>from pytorch_metric_learning.distances import BatchedDistance, CosineSimilarity\n\ndef fn(mat, s, e):\n    print(f\"At query indices {s}:{e}\")\n\ndistance = BatchedDistance(CosineSimilarity(), fn)\n\n# Works like a regular distance function, except nothing is returned.\n# So any persistent changes need to be done in the supplied iter_fn.\n# query vs query\ndistance(embeddings)\n# query vs ref\ndistance(embeddings, ref_emb)\n</code></pre></p>"},{"location":"distances/#cosinesimilarity","title":"CosineSimilarity","text":"<pre><code>distances.CosineSimilarity(**kwargs)\n</code></pre> <p>The returned <code>mat[i,j]</code> is the cosine similarity between <code>query_emb[i]</code> and <code>ref_emb[j]</code>. This class is equivalent to <code>DotProductSimilarity(normalize_embeddings=True)</code>.</p>"},{"location":"distances/#dotproductsimilarity","title":"DotProductSimilarity","text":"<p><pre><code>distances.DotProductSimilarity(**kwargs)\n</code></pre> The returned <code>mat[i,j]</code> is equal to <code>torch.sum(query_emb[i] * ref_emb[j])</code></p>"},{"location":"distances/#lpdistance","title":"LpDistance","text":"<p><pre><code>distances.LpDistance(**kwargs)\n</code></pre> The returned <code>mat[i,j]</code> is the Lp distance between <code>query_emb[i]</code> and <code>ref_emb[j]</code>. With default parameters, this is the Euclidean distance.</p>"},{"location":"distances/#snrdistance","title":"SNRDistance","text":"<p>Signal-to-Noise Ratio: A Robust Distance Metric for Deep Metric Learning <pre><code>distances.SNRDistance(**kwargs)\n</code></pre> The returned <code>mat[i,j]</code> is equal to:</p> <pre><code>torch.var(query_emb[i] - ref_emb[j]) / torch.var(query_emb[i])\n</code></pre>"},{"location":"distributed/","title":"Distributed","text":"<p>Wrap a tuple loss or miner with these when using PyTorch's DistributedDataParallel (i.e. multiprocessing).</p>"},{"location":"distributed/#distributedlosswrapper","title":"DistributedLossWrapper","text":"<pre><code>utils.distributed.DistributedLossWrapper(loss, efficient=False)\n</code></pre> <p>Parameters:</p> <ul> <li>loss: The loss function to wrap</li> <li>efficient:<ul> <li><code>True</code>: each process uses its own embeddings for anchors, and the gathered embeddings for positives/negatives. Gradients will not be equal to those in non-distributed code, but the benefit is reduced memory and faster training.</li> <li><code>False</code>: each process uses gathered embeddings for both anchors and positives/negatives. Gradients will be equal to those in non-distributed code, but at the cost of doing unnecessary operations (i.e. doing computations where both anchors and positives/negatives have no gradient).</li> </ul> </li> </ul> <p>Example usage: <pre><code>from pytorch_metric_learning import losses\nfrom pytorch_metric_learning.utils import distributed as pml_dist\n\nloss_func = losses.ContrastiveLoss()\nloss_func = pml_dist.DistributedLossWrapper(loss_func)\n\n# in each process during training\nloss = loss_func(embeddings, labels)\n</code></pre></p>"},{"location":"distributed/#distributedminerwrapper","title":"DistributedMinerWrapper","text":"<pre><code>utils.distributed.DistributedMinerWrapper(miner, efficient=False)\n</code></pre> <p>Parameters:</p> <ul> <li>miner: The miner to wrap</li> <li>efficient: If your distributed loss function has <code>efficient=True</code> then you must also set the distributed miner's <code>efficient</code> to True.</li> </ul> <p>Example usage: <pre><code>from pytorch_metric_learning import miners\nfrom pytorch_metric_learning.utils import distributed as pml_dist\n\nminer = miners.MultiSimilarityMiner()\nminer = pml_dist.DistributedMinerWrapper(miner)\n\n# in each process\ntuples = miner(embeddings, labels)\n# pass into a DistributedLossWrapper\nloss = loss_func(embeddings, labels, indices_tuple)\n</code></pre></p>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#large-batch-sizes-and-the-int_max-error","title":"Large batch sizes and the <code>INT_MAX</code> error","text":"<p>A large batch size results in a huge number of pairs/triplets. When the <code>loss_and_miner_utils</code> code processes a huge number of tuples, it can cause a PyTorch error:</p> <p><code>RuntimeError: nonzero is not supported for tensors with more than INT_MAX element</code></p> <p>To fix this error, lower your batch size.</p>"},{"location":"inference_models/","title":"Inference Models","text":"<p>utils.inference contains classes that make it convenient to find matching pairs within a batch, or from a set of pairs. Take a look at this notebook to see example usage.</p>"},{"location":"inference_models/#inferencemodel","title":"InferenceModel","text":"<p><pre><code>from pytorch_metric_learning.utils.inference import InferenceModel\nInferenceModel(trunk,\n                embedder=None,\n                match_finder=None,\n                normalize_embeddings=True,\n                knn_func=None,\n                data_device=None,\n                dtype=None)\n</code></pre> Parameters:</p> <ul> <li>trunk: Your trained model for computing embeddings.</li> <li>embedder: Optional. This is if your model is split into two components (trunk and embedder). If None, then the embedder will simply return the trunk's output.</li> <li>match_finder: A MatchFinder object. If <code>None</code>, it will be set to <code>MatchFinder(distance=CosineSimilarity(), threshold=0.9)</code>.</li> <li>normalize_embeddings: If True, embeddings will be normalized to have Euclidean norm of 1.</li> <li>knn_func: The function used for computing k-nearest-neighbors. If <code>None</code>, it will be set to <code>FaissKNN()</code>.</li> <li>data_device: The device that you want to put batches of data on. If not specified, GPUs will be used if available.</li> <li>dtype: The datatype to cast data to. If None, no casting will be done.</li> </ul> <p>Methods: <pre><code># initialize with a model\nim = InferenceModel(model)\n\n# pass in a dataset to serve as the search space for k-nn\nim.train_knn(dataset)\n\n# add another dataset to the index\nim.add_to_knn(dataset2)\n\n# get the 10 nearest neighbors of a query\ndistances, indices = im.get_nearest_neighbors(query, k=10)\n\n# determine if inputs are close to each other\nis_match = im.is_match(x, y)\n\n# determine \"is_match\" pairwise for all elements in a batch\nmatch_matrix = im.get_matches(x)\n\n# save and load the knn function (which is a faiss index by default)\nim.save_knn_func(\"filename.index\")\nim.load_knn_func(\"filename.index\")\n</code></pre></p>"},{"location":"inference_models/#matchfinder","title":"MatchFinder","text":"<pre><code>from pytorch_metric_learning.utils.inference import MatchFinder\nMatchFinder(distance=None, threshold=None)\n</code></pre> <p>Parameters:</p> <ul> <li>distance: A distance object.</li> <li>threshold: Optional. Pairs will be a match if they fall under this threshold for non-inverted distances, or over this value for inverted distances. If not provided, then a threshold must be provided during function calls.</li> </ul>"},{"location":"inference_models/#faissknn","title":"FaissKNN","text":"<p>Uses the faiss library to compute k-nearest-neighbors</p> <pre><code>from pytorch_metric_learning.utils.inference import FaissKNN\nFaissKNN(reset_before=True,\n            reset_after=True, \n            index_init_fn=None, \n            gpus=None)\n</code></pre> <p>Parameters:</p> <ul> <li>reset_before: Reset the faiss index before knn is computed.</li> <li>reset_after: Reset the faiss index after knn is computed (good for clearing memory).</li> <li>index_init_fn: A callable that takes in the embedding dimensionality and returns a faiss index. The default is <code>faiss.IndexFlatL2</code>.</li> <li>gpus: A list of gpu indices to move the faiss index onto. The default is to use all available gpus, if the input tensors are also on gpus.</li> </ul> <p>Example: <pre><code># use faiss.IndexFlatIP on 3 gpus\nknn_func = FaissKNN(index_init_fn=faiss.IndexFlatIP, gpus=[0,1,2])\n\n# query = query embeddings \n# k = the k in k-nearest-neighbors\n# reference = the embeddings to search\n# last argument is whether or not query and reference share datapoints\ndistances, indices = knn_func(query, k, references, False)\n</code></pre></p>"},{"location":"inference_models/#faisskmeans","title":"FaissKMeans","text":"<p>Uses the faiss library to do k-means clustering.</p> <pre><code>from pytorch_metric_learning.utils.inference import FaissKMeans\nFaissKMeans(**kwargs)\n</code></pre> <p>Parameters:</p> <ul> <li>kwargs: Keyword arguments that will be passed to the <code>faiss.Kmeans</code> constructor.</li> </ul> <p>Example: <pre><code>kmeans_func = FaissKMeans(niter=100, verbose=True, gpu=True)\n\n# cluster into 10 groups\ncluster_assignments = kmeans_func(embeddings, 10)\n</code></pre></p>"},{"location":"inference_models/#customknn","title":"CustomKNN","text":"<p>Uses a distance function to determine similarity between datapoints, and then computes k-nearest-neighbors.</p> <pre><code>from pytorch_metric_learning.utils.inference import CustomKNN\nCustomKNN(distance, batch_size=None)\n</code></pre> <p>Parameters:</p> <ul> <li>distance: A distance function</li> <li>batch_size: If specified, k-nn will be computed incrementally. For example, if there are 50000 reference embeddings and the batch size is 32, then CustomKNN will iterate through all embeddings, using distance matrices of size (32, 50000). The final result is equal to the  <code>batch_size=None</code> setting, but saves memory because the full (50000, 50000) matrix does not need to be computed all at once.</li> </ul> <p>Example: <pre><code>from pytorch_metric_learning.distances import SNRDistance\nfrom pytorch_metric_learning.utils.inference import CustomKNN\n\nknn_func = CustomKNN(SNRDistance())\ndistances, indices = knn_func(query, k, references, False)\n</code></pre></p>"},{"location":"logging_presets/","title":"Logging Presets","text":"<p>The <code>logging_presets</code> module contains ready-to-use hooks for logging data, validating and saving your models, and early stoppage during training. It requires the record-keeper and tensorboard packages, which can be installed with pip:</p> <p><code>pip install record-keeper tensorboard</code></p> <p>Here's how you can use it in conjunction with a trainer and tester: <pre><code>import pytorch_metric_learning.utils.logging_presets as LP\nlog_folder, tensorboard_folder = \"example_logs\", \"example_tensorboard\"\nrecord_keeper, _, _ = LP.get_record_keeper(log_folder, tensorboard_folder)\nhooks = LP.get_hook_container(record_keeper)\ndataset_dict = {\"val\": val_dataset}\nmodel_folder = \"example_saved_models\"\n\n# Create the tester\ntester = testers.GlobalEmbeddingSpaceTester(end_of_testing_hook=hooks.end_of_testing_hook)\nend_of_epoch_hook = hooks.end_of_epoch_hook(tester, dataset_dict, model_folder)\ntrainer = trainers.MetricLossOnly(models,\n                                optimizers,\n                                batch_size,\n                                loss_funcs,\n                                mining_funcs,\n                                train_dataset,\n                                sampler=sampler,\n                                end_of_iteration_hook=hooks.end_of_iteration_hook,\n                                end_of_epoch_hook=end_of_epoch_hook)\n\ntrainer.train(num_epochs=num_epochs)\n</code></pre> With the provided hooks, data from both the training and validation stages will be saved in csv, sqlite, and tensorboard format, and models and optimizers will be saved in the specified model folder. See the example notebooks for complete examples. Read the next section to learn more about the provided hooks.</p>"},{"location":"logging_presets/#hookcontainer","title":"HookContainer","text":"<p>This class contains ready-to-use hooks to be used by trainers and testers.</p> <pre><code>import pytorch_metric_learning.utils.logging_presets as LP\nLP.HookContainer(record_keeper, \n    record_group_name_prefix=None, \n    primary_metric=\"mean_average_precision_at_r\", \n    validation_split_name=\"val\",\n    save_models=True,\n    log_freq=50)\n</code></pre> <p>Parameters:</p> <ul> <li>record_keeper: A <code>record-keeper</code> object. Install: <code>pip install record-keeper tensorboard</code>.</li> <li>record_group_name_prefix: A string which will be prepended to all record names and tensorboard tags.</li> <li>primary_metric: A string that specifies the accuracy metric which will be used to determine the best checkpoint. Must be one of:<ul> <li>mean_average_precision_at_r</li> <li>r_precision</li> <li>precision_at_1</li> <li>NMI</li> </ul> </li> <li>validation_split_name: Optional. Default value is \"val\". The name of your validation set in <code>dataset_dict</code>.</li> <li>save_models: Optional. Models will be saved if this is <code>True</code>.</li> <li>log_freq: Data will be logged every <code>log_freq</code> iterations.</li> </ul> <p>Important functions:</p> <ul> <li>end_of_iteration_hook: This function records data about models, optimizers, and loss and mining functions. You can pass this function directly into a trainer object.</li> <li>end_of_epoch_hook: This function runs validation and saves models. This function returns the actual hook, i.e. you must pass in the following arguments to obtain the hook.<ul> <li>tester: A tester object.</li> <li>dataset_dict: A dictionary mapping from split names to PyTorch datasets. For example: <code>{\"train\": train_dataset, \"val\": val_dataset}</code></li> <li>model_folder: A string which is the folder path where models, optimizers etc. will be saved. </li> <li>test_interval: Optional. Default value is 1. Validation will be run every <code>test_interval</code> epochs.</li> <li>patience: Optional. Default value is None. If not None, training will end early if <code>epoch - best_epoch &gt; patience</code>.</li> <li>splits_to_eval: Optional. See splits_to_eval.</li> <li>test_collate_fn: Optional. Default value is None. This is the collate function used by the dataloader during testing. </li> </ul> </li> <li>end_of_testing_hook: This function records accuracy metrics. You can pass this function directly into a tester object.</li> </ul> <p>Useful methods:</p> <p>Getting loss history: <pre><code># Get a dictionary mapping from loss names to lists\nloss_histories = hooks.get_loss_history() \n\n# You can also specify which loss histories you want\n# It will still return a dictionary. In this case, the dictionary will contain only \"total_loss\"\nloss_histories = hooks.get_loss_history(loss_names=[\"total_loss\"])\n</code></pre></p> <p>Getting accuracy history <pre><code># The first argument is the tester object. The second is the split name.\n# Get a dictionary containing the keys \"epoch\" and the primary metric\n# The values are lists\nacc_histories = hooks.get_accuracy_history(tester, \"val\")\n\n# Get all accuracy histories\nacc_histories = hooks.get_accuracy_history(tester, \"val\", return_all_metrics=True)\n\n# Get a specific set of accuracy histories\nacc_histories = hooks.get_accuracy_history(tester, \"val\", metrics=[\"AMI\", \"NMI\"])\n</code></pre></p>"},{"location":"losses/","title":"Losses","text":"<p>All loss functions are used as follows:</p> <pre><code>from pytorch_metric_learning import losses\nloss_func = losses.SomeLoss()\nloss = loss_func(embeddings, labels) # in your training for-loop\n</code></pre> <p>Or if you are using a loss in conjunction with a miner:</p> <pre><code>from pytorch_metric_learning import miners\nminer_func = miners.SomeMiner()\nloss_func = losses.SomeLoss()\nminer_output = miner_func(embeddings, labels) # in your training for-loop\nloss = loss_func(embeddings, labels, miner_output)\n</code></pre> <p>For some losses, you don't need to pass in labels if you are already passing in pair/triplet indices: <pre><code>loss = loss_func(embeddings, indices_tuple=pairs)\n# it also works with ref_emb\nloss = loss_func(embeddings, indices_tuple=pairs, ref_emb=ref_emb)\n</code></pre></p> Losses for which you can pass in <code>indices_tuple</code> without <code>labels</code> <ul> <li>CircleLoss</li> <li>ContrastiveLoss</li> <li>IntraPairVarianceLoss</li> <li>GeneralizedLiftedStructureLoss</li> <li>LiftedStructureLoss</li> <li>MarginLoss</li> <li>MultiSimilarityLoss</li> <li>NTXentLoss</li> <li>SignalToNoiseRatioContrastiveLoss</li> <li>SupConLoss</li> <li>TripletMarginLoss</li> <li>TupletMarginLoss</li> </ul> <p>You can specify how losses get reduced to a single value by using a reducer: <pre><code>from pytorch_metric_learning import reducers\nreducer = reducers.SomeReducer()\nloss_func = losses.SomeLoss(reducer=reducer)\nloss = loss_func(embeddings, labels) # in your training for-loop\n</code></pre></p> <p>For tuple losses, you can separate the source of anchors and positives/negatives: <pre><code>loss_func = losses.SomeLoss()\n# anchors will come from embeddings\n# positives/negatives will come from ref_emb\nloss = loss_func(embeddings, labels, ref_emb=ref_emb, ref_labels=ref_labels)\n</code></pre></p> <p>For classification losses, you can get logits using the <code>get_logits</code> function: <pre><code>loss_func = losses.SomeClassificationLoss()\nlogits = loss_func.get_logits(embeddings)\n</code></pre></p>"},{"location":"losses/#angularloss","title":"AngularLoss","text":"<p>Deep Metric Learning with Angular Loss <pre><code>losses.AngularLoss(alpha=40, **kwargs)\n</code></pre> Equation:</p> <p></p> <p>Parameters:</p> <ul> <li>alpha: The angle specified in degrees. The paper uses values between 36 and 55.</li> </ul> <p>Default distance: </p> <ul> <li> <p><code>LpDistance(p=2, power=1, normalize_embeddings=True)</code></p> <ul> <li>This is the only compatible distance.</li> </ul> </li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul> <p>Reducer input:</p> <ul> <li>loss: The loss for every <code>a1</code>, where <code>(a1,p)</code> represents every positive pair in the batch. Reduction type is <code>\"element\"</code>.</li> </ul>"},{"location":"losses/#arcfaceloss","title":"ArcFaceLoss","text":"<p>ArcFace: Additive Angular Margin Loss for Deep Face Recognition</p> <pre><code>losses.ArcFaceLoss(num_classes, embedding_size, margin=28.6, scale=64, **kwargs)\n</code></pre> <p>Equation:</p> <p></p> <p>Parameters:</p> <ul> <li>num_classes: The number of classes in your training dataset.</li> <li>embedding_size: The size of the embeddings that you pass into the loss function. For example, if your batch size is 128 and your network outputs 512 dimensional embeddings, then set <code>embedding_size</code> to 512.</li> <li>margin: The angular margin penalty in degrees. In the above equation, <code>m = radians(margin)</code>. The paper uses 0.5 radians, which is 28.6 degrees.</li> <li>scale: This is <code>s</code> in the above equation. The paper uses 64.</li> </ul> <p>Other info: </p> <ul> <li>This also extends WeightRegularizerMixin, so it accepts <code>weight_regularizer</code>, <code>weight_reg_weight</code>, and <code>weight_init_func</code> as optional arguments.</li> <li>This loss requires an optimizer. You need to create an optimizer and pass this loss's parameters to that optimizer. For example: <pre><code>loss_func = losses.ArcFaceLoss(...).to(torch.device('cuda'))\nloss_optimizer = torch.optim.SGD(loss_func.parameters(), lr=0.01)\n# then during training:\nloss_optimizer.step()\n</code></pre></li> </ul> <p>Default distance: </p> <ul> <li><code>CosineSimilarity()</code><ul> <li>This is the only compatible distance.</li> </ul> </li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul> <p>Reducer input:</p> <ul> <li>loss: The loss per element in the batch. Reduction type is <code>\"element\"</code>.</li> </ul>"},{"location":"losses/#basemetriclossfunction","title":"BaseMetricLossFunction","text":"<p>All loss functions extend this class and therefore inherit its <code>__init__</code> parameters.</p> <pre><code>losses.BaseMetricLossFunction(collect_stats = False, \n                            reducer = None, \n                            distance = None, \n                            embedding_regularizer = None,\n                            embedding_reg_weight = 1)\n</code></pre> <p>Parameters:</p> <ul> <li>collect_stats: If True, will collect various statistics that may be useful to analyze during experiments. If False, these computations will be skipped. Want to make <code>True</code> the default? Set the global COLLECT_STATS flag.</li> <li>reducer: A reducer object. If None, then the default reducer will be used.</li> <li>distance: A distance object. If None, then the default distance will be used.</li> <li>embedding_regularizer: A regularizer object that will be applied to embeddings. If None, then no embedding regularization will be used.</li> <li>embedding_reg_weight: If an embedding regularizer is used, then its loss will be multiplied by this amount before being added to the total loss.</li> </ul> <p>Default distance: </p> <ul> <li><code>LpDistance(normalize_embeddings=True, p=2, power=1)</code></li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul> <p>Reducer input:</p> <ul> <li>embedding_reg_loss: Only exists if an embedding regularizer is used. It contains the loss per element in the batch. Reduction type is <code>\"already_reduced\"</code>. </li> </ul> <p>Required Implementations: <pre><code>def compute_loss(self, embeddings, labels, indices_tuple, ref_emb, ref_labels):\n    raise NotImplementedError\n</code></pre></p>"},{"location":"losses/#circleloss","title":"CircleLoss","text":"<p>Circle Loss: A Unified Perspective of Pair Similarity Optimization</p> <pre><code>losses.CircleLoss(m=0.4, gamma=80, **kwargs)\n</code></pre> <p>Equations:</p> <p></p> <p>where</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Parameters:</p> <ul> <li>m: The relaxation factor that controls the radius of the decision boundary. The paper uses 0.25 for face recognition, and 0.4 for fine-grained image retrieval (images of birds, cars, and online products).</li> <li>gamma: The scale factor that determines the largest scale of each similarity score. The paper uses 256 for face recognition, and 80 for fine-grained image retrieval.</li> </ul> <p>Default distance: </p> <ul> <li> <p><code>CosineSimilarity()</code></p> <ul> <li>This is the only compatible distance.</li> </ul> </li> </ul> <p>Default reducer: </p> <ul> <li>AvgNonZeroReducer</li> </ul> <p>Reducer input:</p> <ul> <li>loss: The loss per element in the batch. Reduction type is <code>\"element\"</code>.</li> </ul>"},{"location":"losses/#contrastiveloss","title":"ContrastiveLoss","text":"<pre><code>losses.ContrastiveLoss(pos_margin=0, neg_margin=1, **kwargs):\n</code></pre> <p>Equation:</p> <p>If using a distance metric like LpDistance, the loss is:</p> <p></p> <p>If using a similarity metric like CosineSimilarity, the loss is:</p> <p></p> <p>Parameters:</p> <ul> <li>pos_margin: The distance (or similarity) over (under) which positive pairs will contribute to the loss.</li> <li>neg_margin: The distance (or similarity) under (over) which negative pairs will contribute to the loss.  </li> </ul> <p>Note that the default values for <code>pos_margin</code> and <code>neg_margin</code> are suitable if you are using a non-inverted distance measure, like LpDistance. If you use an inverted distance measure like CosineSimilarity, then more appropriate values would be <code>pos_margin = 1</code> and <code>neg_margin = 0</code>.</p> <p>Default distance: </p> <ul> <li><code>LpDistance(normalize_embeddings=True, p=2, power=1)</code></li> </ul> <p>Default reducer: </p> <ul> <li>AvgNonZeroReducer</li> </ul> <p>Reducer input:</p> <ul> <li>pos_loss: The loss per positive pair in the batch. Reduction type is <code>\"pos_pair\"</code>.</li> <li>neg_loss: The loss per negative pair in the batch. Reduction type is <code>\"neg_pair\"</code>.</li> </ul>"},{"location":"losses/#cosfaceloss","title":"CosFaceLoss","text":"<p>CosFace: Large Margin Cosine Loss for Deep Face Recognition</p> <pre><code>losses.CosFaceLoss(num_classes, embedding_size, margin=0.35, scale=64, **kwargs)\n</code></pre> <p>Equation:</p> <p></p> <p>Parameters:</p> <ul> <li>num_classes: The number of classes in your training dataset.</li> <li>embedding_size: The size of the embeddings that you pass into the loss function. For example, if your batch size is 128 and your network outputs 512 dimensional embeddings, then set <code>embedding_size</code> to 512.</li> <li>margin: The cosine margin penalty (m in the above equation). The paper used values between 0.25 and 0.45.</li> <li>scale: This is <code>s</code> in the above equation. The paper uses 64.</li> </ul> <p>Other info: </p> <ul> <li>This also extends WeightRegularizerMixin, so it accepts <code>weight_regularizer</code>, <code>weight_reg_weight</code>, and <code>weight_init_func</code> as optional arguments.</li> <li>This loss requires an optimizer. You need to create an optimizer and pass this loss's parameters to that optimizer. For example: <pre><code>loss_func = losses.CosFaceLoss(...).to(torch.device('cuda'))\nloss_optimizer = torch.optim.SGD(loss_func.parameters(), lr=0.01)\n# then during training:\nloss_optimizer.step()\n</code></pre></li> </ul> <p>Default distance: </p> <ul> <li> <p><code>CosineSimilarity()</code></p> <ul> <li>This is the only compatible distance.</li> </ul> </li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul> <p>Reducer input:</p> <ul> <li>loss: The loss per element in the batch. Reduction type is <code>\"element\"</code>.</li> </ul>"},{"location":"losses/#crossbatchmemory","title":"CrossBatchMemory","text":"<p>This wraps a loss function, and implements Cross-Batch Memory for Embedding Learning. It stores embeddings from previous iterations in a queue, and uses them to form more pairs/triplets with the current iteration's embeddings.</p> <pre><code>losses.CrossBatchMemory(loss, embedding_size, memory_size=1024, miner=None)\n</code></pre> <p>Parameters:</p> <ul> <li>loss: The loss function to be wrapped. For example, you could pass in <code>ContrastiveLoss()</code>.</li> <li>embedding_size: The size of the embeddings that you pass into the loss function. For example, if your batch size is 128 and your network outputs 512 dimensional embeddings, then set <code>embedding_size</code> to 512.</li> <li>memory_size: The size of the memory queue.</li> <li>miner: An optional tuple miner, which will be used to mine pairs/triplets from the memory queue.</li> </ul> <p>Forward function <pre><code>loss_fn(embeddings, labels, indices_tuple=None, enqueue_mask=None)\n</code></pre></p> <p>As shown above, CrossBatchMemory comes with a 4th argument in its <code>forward</code> function:</p> <ul> <li>enqueue_mask: A boolean tensor where <code>enqueue_mask[i]</code> is True if <code>embeddings[i]</code> should be added to the memory queue. This enables CrossBatchMemory to be used in self-supervision frameworks like MoCo. Check out the MoCo on CIFAR100 notebook to see how this works.</li> </ul> Supported Loss Functions <ul> <li>AngularLoss</li> <li>CircleLoss</li> <li>ContrastiveLoss</li> <li>GeneralizedLiftedStructureLoss</li> <li>IntraPairVarianceLoss</li> <li>LiftedStructureLoss</li> <li>MarginLoss</li> <li>MultiSimilarityLoss</li> <li>NCALoss</li> <li>NTXentLoss</li> <li>SignalToNoiseRatioContrastiveLoss</li> <li>SupConLoss</li> <li>TripletMarginLoss</li> <li>TupletMarginLoss</li> </ul> <p>Reset queue</p> <p>The queue can be cleared like this: <pre><code>loss_fn.reset_queue()\n</code></pre></p>"},{"location":"losses/#fastaploss","title":"FastAPLoss","text":"<p>Deep Metric Learning to Rank</p> <pre><code>losses.FastAPLoss(num_bins=10, **kwargs)\n</code></pre> <p>Parameters:</p> <ul> <li>num_bins: The number of soft histogram bins for calculating average precision. The paper suggests using 10.</li> </ul> <p>Default distance:</p> <ul> <li><code>LpDistance(normalize_embeddings=True, p=2, power=2)</code><ul> <li>The only compatible distance is <code>LpDistance(normalize_embeddings=True, p=2)</code>. However, the <code>power</code> value can be changed.</li> </ul> </li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul> <p>Reducer input:</p> <ul> <li>loss: The loss per element that has at least 1 positive in the batch. Reduction type is <code>\"element\"</code>.</li> </ul>"},{"location":"losses/#genericpairloss","title":"GenericPairLoss","text":"<p><pre><code>losses.GenericPairLoss(mat_based_loss, **kwargs)\n</code></pre> Parameters:</p> <ul> <li>mat_based_loss: See required implementations.</li> </ul> <p>Required Implementations: <pre><code># If mat_based_loss is True, then this takes in mat, pos_mask, neg_mask\n# If False, this takes in pos_pair, neg_pair, indices_tuple\ndef _compute_loss(self):\n    raise NotImplementedError\n</code></pre></p>"},{"location":"losses/#generalizedliftedstructureloss","title":"GeneralizedLiftedStructureLoss","text":"<p>This was presented in In Defense of the Triplet Loss for Person Re-Identification. It is a modification of the original LiftedStructureLoss</p> <p><pre><code>losses.GeneralizedLiftedStructureLoss(neg_margin=1, pos_margin=0, **kwargs)\n</code></pre> Equation:</p> <p></p> <p>Parameters:</p> <ul> <li>pos_margin: The margin in the expression <code>e^(D - margin)</code>. The paper uses <code>pos_margin = 0</code>, which is why this margin does not appear in the above equation.</li> <li>neg_margin: This is <code>m</code> in the above equation. The paper used values between 0.1 and 1.</li> </ul> <p>Default distance: </p> <ul> <li><code>LpDistance(normalize_embeddings=True, p=2, power=1)</code></li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul> <p>Reducer input:</p> <ul> <li>loss: The loss per element in the batch. Reduction type is <code>\"element\"</code>.</li> </ul>"},{"location":"losses/#instanceloss","title":"InstanceLoss","text":"<p>Dual-Path Convolutional Image-Text Embeddings with Instance Loss <pre><code>losses.InstanceLoss(gamma=64, **kwargs)\n</code></pre></p> <p>Parameters:</p> <ul> <li>gamma: The cosine similarity matrix is scaled by this amount.</li> </ul>"},{"location":"losses/#intrapairvarianceloss","title":"IntraPairVarianceLoss","text":"<p>Deep Metric Learning with Tuplet Margin Loss <pre><code>losses.IntraPairVarianceLoss(pos_eps=0.01, neg_eps=0.01, **kwargs)\n</code></pre></p> <p>Equations:</p> <p></p> <p></p> <p>Parameters:</p> <ul> <li>pos_eps: The epsilon in the Lpos equation. The paper uses 0.01.</li> <li>neg_eps: The epsilon in the Lneg equation. The paper uses 0.01.</li> </ul> <p>You should probably use this in conjunction with another loss, as described in the paper. You can accomplish this by using MultipleLosses: <pre><code>main_loss = losses.TupletMarginLoss()\nvar_loss = losses.IntraPairVarianceLoss()\ncomplete_loss = losses.MultipleLosses([main_loss, var_loss], weights=[1, 0.5])\n</code></pre></p> <p>Default distance: </p> <ul> <li><code>LpDistance(normalize_embeddings=True, p=2, power=1)</code></li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul> <p>Reducer input:</p> <ul> <li>pos_loss: The loss per positive pair in the batch. Reduction type is <code>\"pos_pair\"</code>.</li> <li>neg_loss: The loss per negative pair in the batch. Reduction type is <code>\"neg_pair\"</code>.</li> </ul>"},{"location":"losses/#largemarginsoftmaxloss","title":"LargeMarginSoftmaxLoss","text":"<p>Large-Margin Softmax Loss for Convolutional Neural Networks</p> <pre><code>losses.LargeMarginSoftmaxLoss(num_classes, \n                            embedding_size, \n                            margin=4, \n                            scale=1, \n                            **kwargs)\n</code></pre> <p>Equations:</p> <p></p> <p>where</p> <p></p> <p>Parameters:</p> <ul> <li>num_classes: The number of classes in your training dataset.</li> <li>embedding_size: The size of the embeddings that you pass into the loss function. For example, if your batch size is 128 and your network outputs 512 dimensional embeddings, then set <code>embedding_size</code> to 512.</li> <li>margin: An integer which dictates the size of the angular margin. This is <code>m</code> in the above equation. The paper finds <code>m=4</code> works best.</li> <li>scale: The exponent multiplier in the loss's softmax expression. The paper uses <code>scale = 1</code>, which is why it does not appear in the above equation.</li> </ul> <p>Other info: </p> <ul> <li>This also extends WeightRegularizerMixin, so it accepts <code>weight_regularizer</code>, <code>weight_reg_weight</code>, and <code>weight_init_func</code> as optional arguments.</li> <li>This loss requires an optimizer. You need to create an optimizer and pass this loss's parameters to that optimizer. For example: <pre><code>loss_func = losses.LargeMarginSoftmaxLoss(...).to(torch.device('cuda'))\nloss_optimizer = torch.optim.SGD(loss_func.parameters(), lr=0.01)\n# then during training:\nloss_optimizer.step()\n</code></pre></li> </ul> <p>Default distance: </p> <ul> <li> <p><code>CosineSimilarity()</code></p> <ul> <li>This is the only compatible distance.</li> </ul> </li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul> <p>Reducer input:</p> <ul> <li>loss: The loss per element in the batch. Reduction type is <code>\"element\"</code>.</li> </ul>"},{"location":"losses/#liftedstructureloss","title":"LiftedStructureLoss","text":"<p>The original lifted structure loss as presented in Deep Metric Learning via Lifted Structured Feature Embedding</p> <pre><code>losses.LiftedStructureLoss(neg_margin=1, pos_margin=0, **kwargs):\n</code></pre> <p>Equation:</p> <p></p> <p>Parameters:</p> <ul> <li>pos_margin: The margin in the expression <code>D_(i,j) - margin</code>. The paper uses <code>pos_margin = 0</code>, which is why it does not appear in the above equation.</li> <li>neg_margin: This is <code>alpha</code> in the above equation. The paper uses 1.</li> </ul> <p>Default distance: </p> <ul> <li><code>LpDistance(normalize_embeddings=True, p=2, power=1)</code></li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul> <p>Reducer input:</p> <ul> <li>loss: The loss per positive pair in the batch. Reduction type is <code>\"pos_pair\"</code>.</li> </ul>"},{"location":"losses/#manifoldloss","title":"ManifoldLoss","text":"<p>Ensemble Deep Manifold Similarity Learning using Hard Proxies</p> <pre><code>losses.ManifoldLoss(\n        l: int,\n        K: int = 50,\n        lambdaC: float = 1.0,\n        alpha: float = 0.8,\n        margin: float = 5e-4,\n        **kwargs\n    )\n</code></pre> <p>Parameters</p> <ul> <li> <p>l: embedding size.</p> </li> <li> <p>K: number of proxies.</p> </li> <li> <p>lambdaC: regularization weight. Used in the formula <code>loss = intrinsic_loss + lambdaC*context_loss</code>.     If <code>lambdaC=0</code>, then it uses only the intrinsic loss. If <code>lambdaC=np.inf</code>, then it uses only the context loss.</p> </li> <li> <p>alpha: parameter of the Random Walk. Must be in the range <code>(0,1)</code>. It specifies the amount of similarity between neighboring nodes.</p> </li> <li> <p>margin: margin used in the calculation of the loss.</p> </li> </ul> <p>Example usage: <pre><code>loss_fn = ManifoldLoss(128)\n\n# use random cluster centers\nloss = loss_fn(embeddings)\n# or specify indices of embeddings to use as cluster centers\nloss = loss_fn(embeddings, indices_tuple=indices)\n</code></pre></p> <p>Important notes</p> <p><code>labels</code>, <code>ref_emb</code>, and <code>ref_labels</code> are not supported for this loss function.</p> <p>Default reducer: </p> <ul> <li>This loss returns an already reduced loss.</li> </ul>"},{"location":"losses/#marginloss","title":"MarginLoss","text":"<p>Sampling Matters in Deep Embedding Learning <pre><code>losses.MarginLoss(margin=0.2, \n                nu=0, \n                beta=1.2, \n                triplets_per_anchor=\"all\", \n                learn_beta=False, \n                num_classes=None, \n                **kwargs)\n</code></pre></p> <p>Equations:</p> <p></p> <p>where</p> <p></p> <p>Parameters:</p> <ul> <li>margin: This is alpha in the above equation. The paper uses 0.2.</li> <li>nu: The regularization weight for the magnitude of beta.</li> <li>beta: This is beta in the above equation. The paper uses 1.2 as the initial value.</li> <li>triplets_per_anchor: The number of triplets per element to sample within a batch. Can be an integer or the string \"all\". For example, if your batch size is 128, and triplets_per_anchor is 100, then 12800 triplets will be sampled. If triplets_per_anchor is \"all\", then all possible triplets in the batch will be used.</li> <li>learn_beta: If True, beta will be a torch.nn.Parameter, which can be optimized using any PyTorch optimizer.</li> <li>num_classes: If not None, then beta will be of size <code>num_classes</code>, so that a separate beta is used for each class during training.</li> </ul> <p>Default distance: </p> <ul> <li><code>LpDistance(normalize_embeddings=True, p=2, power=1)</code></li> </ul> <p>Default reducer: </p> <ul> <li>DivisorReducer</li> </ul> <p>Reducer input:</p> <ul> <li>margin_loss: The loss per triplet in the batch. Reduction type is <code>\"triplet\"</code>.</li> <li>beta_reg_loss: The regularization loss per element in <code>self.beta</code>. Reduction type is <code>\"already_reduced\"</code> if <code>self.num_classes = None</code>. Otherwise it is <code>\"element\"</code>.</li> </ul>"},{"location":"losses/#multisimilarityloss","title":"MultiSimilarityLoss","text":"<p>Multi-Similarity Loss with General Pair Weighting for Deep Metric Learning <pre><code>losses.MultiSimilarityLoss(alpha=2, beta=50, base=0.5, **kwargs)\n</code></pre></p> <p>Equation:</p> <p></p> <p>Parameters:</p> <ul> <li>alpha: The weight applied to positive pairs. The paper uses 2.</li> <li>beta: The weight applied to negative pairs. The paper uses 50.</li> <li>base: The offset applied to the exponent in the loss. This is lambda in the above equation. The paper uses 1. </li> </ul> <p>Default distance: </p> <ul> <li><code>CosineSimilarity()</code></li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul> <p>Reducer input:</p> <ul> <li>loss: The loss per element in the batch. Reduction type is <code>\"element\"</code>.</li> </ul>"},{"location":"losses/#multiplelosses","title":"MultipleLosses","text":"<p>This is a simple wrapper for multiple losses. Pass in a list of already-initialized loss functions. Then, when you call forward on this object, it will return the sum of all wrapped losses. <pre><code>losses.MultipleLosses(losses, miners=None, weights=None)\n</code></pre> Parameters:</p> <ul> <li>losses: A list or dictionary of initialized loss functions. On the forward call of MultipleLosses, each wrapped loss will be computed, and then the average will be returned.</li> <li>miners: Optional. A list or dictionary of mining functions. This allows you to pair mining functions with loss functions. For example, if <code>losses = [loss_A, loss_B]</code>, and <code>miners = [None, miner_B]</code> then no mining will be done for <code>loss_A</code>, but the output of <code>miner_B</code> will be passed to <code>loss_B</code>. The same logic applies if <code>losses = {\"loss_A\": loss_A, \"loss_B\": loss_B}</code> and <code>miners = {\"loss_B\": miner_B}</code>.</li> <li>weights: Optional. A list or dictionary of loss weights, which will be multiplied by the corresponding losses obtained by the loss functions. The default is to multiply each loss by 1. If <code>losses</code> is a list, then <code>weights</code> must be a list. If <code>losses</code> is a dictionary, <code>weights</code> must contain the same keys as <code>losses</code>. </li> </ul>"},{"location":"losses/#ncaloss","title":"NCALoss","text":"<p>Neighbourhood Components Analysis <pre><code>losses.NCALoss(softmax_scale=1, **kwargs)\n</code></pre></p> <p>Equations:</p> <p></p> <p>where</p> <p></p> <p></p> <p>In this implementation, we use <code>-g(A)</code> as the loss.</p> <p>Parameters:</p> <ul> <li>softmax_scale: The exponent multiplier in the loss's softmax expression. The paper uses <code>softmax_scale = 1</code>, which is why it does not appear in the above equations.</li> </ul> <p>Default distance: </p> <ul> <li><code>LpDistance(normalize_embeddings=True, p=2, power=2)</code></li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul> <p>Reducer input:</p> <ul> <li>loss: The loss per element in the batch, that results in a non zero exponent in the cross entropy expression. Reduction type is <code>\"element\"</code>.</li> </ul>"},{"location":"losses/#normalizedsoftmaxloss","title":"NormalizedSoftmaxLoss","text":"<p>Classification is a Strong Baseline for Deep Metric Learning <pre><code>losses.NormalizedSoftmaxLoss(num_classes, embedding_size, temperature=0.05, **kwargs)\n</code></pre></p> <p>Equation:</p> <p></p> <p>Parameters:</p> <ul> <li>num_classes: The number of classes in your training dataset.</li> <li>embedding_size: The size of the embeddings that you pass into the loss function. For example, if your batch size is 128 and your network outputs 512 dimensional embeddings, then set <code>embedding_size</code> to 512.</li> <li>temperature: This is sigma in the above equation. The paper uses 0.05.</li> </ul> <p>Other info</p> <ul> <li>This also extends WeightRegularizerMixin, so it accepts <code>weight_regularizer</code>, <code>weight_reg_weight</code>, and <code>weight_init_func</code> as optional arguments.</li> <li>This loss requires an optimizer. You need to create an optimizer and pass this loss's parameters to that optimizer. For example: <pre><code>loss_func = losses.NormalizedSoftmaxLoss(...).to(torch.device('cuda'))\nloss_optimizer = torch.optim.SGD(loss_func.parameters(), lr=0.01)\n# then during training:\nloss_optimizer.step()\n</code></pre></li> </ul> <p>Default distance: </p> <ul> <li><code>DotProductSimilarity()</code></li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul> <p>Reducer input:</p> <ul> <li>loss: The loss per element in the batch. Reduction type is <code>\"element\"</code>.</li> </ul>"},{"location":"losses/#npairsloss","title":"NPairsLoss","text":"<p>Improved Deep Metric Learning with Multi-class N-pair Loss Objective</p> <p>If your batch has more than 2 samples per label, then you should use NTXentLoss.</p> <pre><code>losses.NPairsLoss(**kwargs)\n</code></pre> <p>Default distance: </p> <ul> <li><code>DotProductSimilarity()</code></li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul> <p>Reducer input:</p> <ul> <li>loss: The loss per element in the batch. Reduction type is <code>\"element\"</code>.</li> </ul>"},{"location":"losses/#ntxentloss","title":"NTXentLoss","text":"<p>This is also known as InfoNCE, and is a generalization of the NPairsLoss. It has been used in self-supervision papers such as: </p> <ul> <li>Representation Learning with Contrastive Predictive Coding</li> <li>Momentum Contrast for Unsupervised Visual Representation Learning</li> <li>A Simple Framework for Contrastive Learning of Visual Representations <pre><code>losses.NTXentLoss(temperature=0.07, **kwargs)\n</code></pre></li> </ul> <p>Equation:</p> <p></p> <p>Parameters:</p> <ul> <li>temperature: This is tau in the above equation. The MoCo paper uses 0.07, while SimCLR uses 0.5.</li> </ul> <p>Default distance: </p> <ul> <li><code>CosineSimilarity()</code></li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul> <p>Reducer input:</p> <ul> <li>loss: The loss per positive pair in the batch. Reduction type is <code>\"pos_pair\"</code>.</li> </ul>"},{"location":"losses/#p2sgradloss","title":"P2SGradLoss","text":"<p>P2SGrad: Refined Gradients for Optimizing Deep Face Models <pre><code>losses.P2SGradLoss(descriptors_dim, num_classes, **kwargs)\n</code></pre></p> <p>Parameters</p> <ul> <li> <p>descriptors_dim: The embedding size.</p> </li> <li> <p>num_classes: The number of classes in your training dataset.</p> </li> </ul> <p>Example usage: <pre><code>loss_fn = P2SGradLoss(128, 10)\nloss = loss_fn(embeddings, labels)\n</code></pre></p> <p>Important notes</p> <p><code>indices_tuple</code>, <code>ref_emb</code>, and <code>ref_labels</code> are not supported for this loss function.</p> <p>Default reducer: </p> <ul> <li>This loss returns an already reduced loss.</li> </ul>"},{"location":"losses/#pnploss","title":"PNPLoss","text":"<p>Rethinking the Optimization of Average Precision: Only Penalizing Negative Instances before Positive Ones is Enough <pre><code>losses.PNPLoss(b=2, alpha=1, anneal=0.01, variant=\"O\", **kwargs)\n</code></pre></p>"},{"location":"losses/#proxyanchorloss","title":"ProxyAnchorLoss","text":"<p>Proxy Anchor Loss for Deep Metric Learning <pre><code>losses.ProxyAnchorLoss(num_classes, embedding_size, margin = 0.1, alpha = 32, **kwargs)\n</code></pre></p> <p>Equation:</p> <p></p> <p>Parameters:</p> <ul> <li>num_classes: The number of classes in your training dataset.</li> <li>embedding_size: The size of the embeddings that you pass into the loss function. For example, if your batch size is 128 and your network outputs 512 dimensional embeddings, then set <code>embedding_size</code> to 512.</li> <li>margin: This is delta in the above equation. The paper uses 0.1.</li> <li>alpha: This is alpha in the above equation. The paper uses 32.</li> </ul> <p>Other info</p> <ul> <li>This also extends WeightRegularizerMixin, so it accepts <code>weight_regularizer</code>, <code>weight_reg_weight</code>, and <code>weight_init_func</code> as optional arguments.</li> <li>This loss requires an optimizer. You need to create an optimizer and pass this loss's parameters to that optimizer. For example: <pre><code>loss_func = losses.ProxyAnchorLoss(...).to(torch.device('cuda'))\nloss_optimizer = torch.optim.SGD(loss_func.parameters(), lr=0.01)\n# then during training:\nloss_optimizer.step()\n</code></pre></li> </ul> <p>Default distance: </p> <ul> <li><code>CosineSimilarity()</code></li> </ul> <p>Default reducer: </p> <ul> <li>DivisorReducer</li> </ul> <p>Reducer input:</p> <ul> <li>pos_loss: The positive pair loss per proxy. Reduction type is <code>\"element\"</code>.</li> <li>neg_loss: The negative pair loss per proxy. Reduction type is <code>\"element\"</code>.</li> </ul>"},{"location":"losses/#proxyncaloss","title":"ProxyNCALoss","text":"<p>No Fuss Distance Metric Learning using Proxies <pre><code>losses.ProxyNCALoss(num_classes, embedding_size, softmax_scale=1, **kwargs)\n</code></pre></p> <p>Parameters:</p> <ul> <li>num_classes: The number of classes in your training dataset.</li> <li>embedding_size: The size of the embeddings that you pass into the loss function. For example, if your batch size is 128 and your network outputs 512 dimensional embeddings, then set <code>embedding_size</code> to 512.</li> <li>softmax_scale: See NCALoss</li> </ul> <p>Other info</p> <ul> <li>This also extends WeightRegularizerMixin, so it accepts <code>weight_regularizer</code>, <code>weight_reg_weight</code>, and <code>weight_init_func</code> as optional arguments.</li> <li>This loss requires an optimizer. You need to create an optimizer and pass this loss's parameters to that optimizer. For example: <pre><code>loss_func = losses.ProxyNCALoss(...).to(torch.device('cuda'))\nloss_optimizer = torch.optim.SGD(loss_func.parameters(), lr=0.01)\n# then during training:\nloss_optimizer.step()\n</code></pre></li> </ul> <p>Default distance: </p> <ul> <li><code>LpDistance(normalize_embeddings=True, p=2, power=2)</code></li> </ul> <p>Default reducer:</p> <ul> <li>MeanReducer</li> </ul> <p>Reducer input:</p> <ul> <li>loss: The loss per element in the batch, that results in a non zero exponent in the cross entropy expression. Reduction type is <code>\"element\"</code>.</li> </ul>"},{"location":"losses/#selfsupervisedloss","title":"SelfSupervisedLoss","text":"<p>A common use case is to have <code>embeddings</code> and <code>ref_emb</code> be augmented versions of each other. For most losses, you have to create labels to indicate which <code>embeddings</code> correspond with which <code>ref_emb</code>. </p> <p><code>SelfSupervisedLoss</code> is a wrapper that takes care of this by creating labels internally. It assumes that:</p> <ul> <li><code>ref_emb[i]</code> is an augmented version of <code>embeddings[i]</code>.</li> <li><code>ref_emb[i]</code> is the only augmented version of <code>embeddings[i]</code> in the batch.</li> </ul> <pre><code>losses.SelfSupervisedLoss(loss, symmetric=True, **kwargs)\n</code></pre> <p>Parameters:</p> <ul> <li>loss: The loss function to be wrapped.</li> <li>symmetric: If <code>True</code>, then the embeddings in both <code>embeddings</code> and <code>ref_emb</code> are used as anchors. If <code>False</code>, then only the embeddings in <code>embeddings</code> are used as anchors.</li> </ul> <p>Example usage:</p> <pre><code>loss_fn = losses.TripletMarginLoss()\nloss_fn = SelfSupervisedLoss(loss_fn)\nloss = loss_fn(embeddings, ref_emb)\n</code></pre> Supported Loss Functions <ul> <li>AngularLoss</li> <li>CircleLoss</li> <li>ContrastiveLoss</li> <li>IntraPairVarianceLoss</li> <li>MultiSimilarityLoss</li> <li>NTXentLoss</li> <li>SignalToNoiseRatioContrastiveLoss</li> <li>SupConLoss</li> <li>TripletMarginLoss</li> <li>TupletMarginLoss</li> </ul>"},{"location":"losses/#signaltonoiseratiocontrastiveloss","title":"SignalToNoiseRatioContrastiveLoss","text":"<p>Signal-to-Noise Ratio: A Robust Distance Metric for Deep Metric Learning <pre><code>losses.SignalToNoiseRatioContrastiveLoss(pos_margin=0, neg_margin=1, **kwargs):\n</code></pre></p> <p>Parameters:</p> <ul> <li>pos_margin: The noise-to-signal ratio over which positive pairs will contribute to the loss.</li> <li>neg_margin: The noise-to-signal ratio under which negative pairs will contribute to the loss.</li> </ul> <p>Default distance: </p> <ul> <li><code>SNRDistance()</code><ul> <li>This is the only compatible distance.</li> </ul> </li> </ul> <p>Default reducer: </p> <ul> <li>AvgNonZeroReducer</li> </ul> <p>Reducer input:</p> <ul> <li>pos_loss: The loss per positive pair in the batch. Reduction type is <code>\"pos_pair\"</code>.</li> <li>neg_loss: The loss per negative pair in the batch. Reduction type is <code>\"neg_pair\"</code>.</li> </ul>"},{"location":"losses/#softtripleloss","title":"SoftTripleLoss","text":"<p>SoftTriple Loss: Deep Metric Learning Without Triplet Sampling <pre><code>losses.SoftTripleLoss(num_classes, \n                    embedding_size, \n                    centers_per_class=10, \n                    la=20, \n                    gamma=0.1, \n                    margin=0.01,\n                    **kwargs)\n</code></pre></p> <p>Equations:</p> <p></p> <p>where</p> <p></p> <p>Parameters:</p> <ul> <li>num_classes: The number of classes in your training dataset.</li> <li>embedding_size: The size of the embeddings that you pass into the loss function. For example, if your batch size is 128 and your network outputs 512 dimensional embeddings, then set <code>embedding_size</code> to 512.</li> <li>centers_per_class: The number of weight vectors per class. (The regular cross entropy loss has 1 center per class.) The paper uses 10.</li> <li>la: This is lambda in the above equation.</li> <li>gamma: This is gamma in the above equation. The paper uses 0.1.</li> <li>margin: The is delta in the above equations. The paper uses 0.01.</li> </ul> <p>Other info</p> <ul> <li>This also extends WeightRegularizerMixin, so it accepts <code>weight_regularizer</code>, <code>weight_reg_weight</code>, and <code>weight_init_func</code> as optional arguments.</li> <li>This loss requires an optimizer. You need to create an optimizer and pass this loss's parameters to that optimizer. For example: <pre><code>loss_func = losses.SoftTripleLoss(...).to(torch.device('cuda'))\nloss_optimizer = torch.optim.SGD(loss_func.parameters(), lr=0.01)\n# then during training:\nloss_optimizer.step()\n</code></pre></li> </ul> <p>Default distance: </p> <ul> <li><code>CosineSimilarity()</code><ul> <li>The distance measure must be inverted. For example, <code>DotProductSimilarity(normalize_embeddings=False)</code> is also compatible.</li> </ul> </li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul> <p>Reducer input:</p> <ul> <li>loss: The loss per element in the batch. Reduction type is <code>\"element\"</code>.</li> </ul>"},{"location":"losses/#spherefaceloss","title":"SphereFaceLoss","text":"<p>SphereFace: Deep Hypersphere Embedding for Face Recognition</p> <pre><code>losses.SphereFaceLoss(num_classes, \n                    embedding_size, \n                    margin=4, \n                    scale=1, \n                    **kwargs)\n</code></pre> <p>Parameters:</p> <p>See LargeMarginSoftmaxLoss</p> <p>Other info</p> <ul> <li>This also extends WeightRegularizerMixin, so it accepts <code>weight_regularizer</code>, <code>weight_reg_weight</code>, and <code>weight_init_func</code> as optional arguments.</li> <li>This loss requires an optimizer. You need to create an optimizer and pass this loss's parameters to that optimizer. For example: <pre><code>loss_func = losses.SphereFaceLoss(...).to(torch.device('cuda'))\nloss_optimizer = torch.optim.SGD(loss_func.parameters(), lr=0.01)\n# then during training:\nloss_optimizer.step()\n</code></pre></li> </ul> <p>Default distance: </p> <ul> <li> <p><code>CosineSimilarity()</code></p> <ul> <li>This is the only compatible distance.</li> </ul> </li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul> <p>Reducer input:</p> <ul> <li>loss: The loss per element in the batch. Reduction type is <code>\"element\"</code>.</li> </ul>"},{"location":"losses/#subcenterarcfaceloss","title":"SubCenterArcFaceLoss","text":"<p>Sub-center ArcFace: Boosting Face Recognition by Large-scale Noisy Web Faces</p> <p>This loss extends ArcFaceLoss. It uses multiple sub centers per class, instead of just a single center, hence the name Sub-center ArcFace.</p> <pre><code>losses.SubCenterArcFaceLoss(\n    num_classes, \n    embedding_size, \n    margin=28.6, \n    scale=64, \n    sub_centers=3, \n    **kwargs\n)\n</code></pre> <p>Parameters:</p> <ul> <li>sub_centers: The number of sub centers per class.</li> </ul> <p>See ArcFaceLoss for a description of the other parameters.</p> <p>Other info: </p> <ul> <li>This loss requires an optimizer. See ArcFaceLoss for details.</li> <li>See ArcFaceLoss for default distance, reducer, and reducer input.</li> </ul> <p>Getting outliers and dominant centers</p> <p>Outliers and dominant centers can be computed as described in the paper. <pre><code>outliers, dominant_centers = loss_func.get_outliers(\n    embeddings, labels, threshold=75, return_dominant_centers=True\n)\n</code></pre></p>"},{"location":"losses/#supconloss","title":"SupConLoss","text":"<p>Described in Supervised Contrastive Learning. <pre><code>losses.SupConLoss(temperature=0.1, **kwargs)\n</code></pre></p> <p>Equation:</p> <p></p> <p>Parameters:</p> <ul> <li>temperature: This is tau in the above equation. The paper uses 0.1.</li> </ul> <p>Default distance: </p> <ul> <li><code>CosineSimilarity()</code></li> </ul> <p>Default reducer: </p> <ul> <li>AvgNonZeroReducer</li> </ul> <p>Reducer input:</p> <ul> <li>loss: The loss per element in the batch. If an element has only negative pairs or no pairs, it's ignored thanks to <code>AvgNonZeroReducer</code>. Reduction type is <code>\"element\"</code>.</li> </ul>"},{"location":"losses/#tripletmarginloss","title":"TripletMarginLoss","text":"<pre><code>losses.TripletMarginLoss(margin=0.05,\n                        swap=False,\n                        smooth_loss=False,\n                        triplets_per_anchor=\"all\",\n                        **kwargs)\n</code></pre> <p>Equation:</p> <p></p> <p>Parameters:</p> <ul> <li>margin: The desired difference between the anchor-positive distance and the anchor-negative distance. This is <code>m</code> in the above equation.</li> <li>swap: Use the positive-negative distance instead of anchor-negative distance, if it violates the margin more.</li> <li>smooth_loss: Use the log-exp version of the triplet loss</li> <li>triplets_per_anchor: The number of triplets per element to sample within a batch. Can be an integer or the string \"all\". For example, if your batch size is 128, and triplets_per_anchor is 100, then 12800 triplets will be sampled. If triplets_per_anchor is \"all\", then all possible triplets in the batch will be used.</li> </ul> <p>Default distance: </p> <ul> <li><code>LpDistance(normalize_embeddings=True, p=2, power=1)</code></li> </ul> <p>Default reducer: </p> <ul> <li>AvgNonZeroReducer</li> </ul> <p>Reducer input:</p> <ul> <li>loss: The loss per triplet in the batch. Reduction type is <code>\"triplet\"</code>.</li> </ul>"},{"location":"losses/#tupletmarginloss","title":"TupletMarginLoss","text":"<p>Deep Metric Learning with Tuplet Margin Loss <pre><code>losses.TupletMarginLoss(margin=5.73, scale=64, **kwargs)\n</code></pre></p> <p>Equation:</p> <p></p> <p>Parameters:</p> <ul> <li>margin: The angular margin (in degrees) applied to positive pairs. This is beta in the above equation. The paper uses a value of 5.73 degrees (0.1 radians).</li> <li>scale: This is <code>s</code> in the above equation.</li> </ul> <p>The paper combines this loss with IntraPairVarianceLoss. You can accomplish this by using MultipleLosses: <pre><code>main_loss = losses.TupletMarginLoss()\nvar_loss = losses.IntraPairVarianceLoss()\ncomplete_loss = losses.MultipleLosses([main_loss, var_loss], weights=[1, 0.5])\n</code></pre></p> <p>Default distance: </p> <ul> <li> <p><code>CosineSimilarity()</code></p> <ul> <li>This is the only compatible distance.</li> </ul> </li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul> <p>Reducer input:</p> <ul> <li>loss: The loss per positive pair in the batch. Reduction type is <code>\"pos_pair\"</code>.</li> </ul>"},{"location":"losses/#weightregularizermixin","title":"WeightRegularizerMixin","text":"<p>Losses can extend this class in addition to BaseMetricLossFunction. You should extend this class if your loss function contains a learnable weight matrix. <pre><code>losses.WeightRegularizerMixin(weight_init_func=None, weight_regularizer=None, weight_reg_weight=1, **kwargs)\n</code></pre></p> <p>Parameters:</p> <ul> <li>weight_init_func: An TorchInitWrapper object, which will be used to initialize the weights of the loss function.</li> <li>weight_regularizer: The regularizer to apply to the loss's learned weights.</li> <li>weight_reg_weight: The amount the regularization loss will be multiplied by.</li> </ul> <p>Extended by:</p> <ul> <li>ArcFaceLoss</li> <li>CosFaceLoss</li> <li>LargeMarginSoftmaxLoss</li> <li>NormalizedSoftmaxLoss</li> <li>ProxyAnchorLoss</li> <li>ProxyNCALoss</li> <li>SoftTripleLoss</li> <li>SphereFaceLoss</li> </ul>"},{"location":"losses/#vicregloss","title":"VICRegLoss","text":"<p>VICReg: Variance-Invariance-Covariance Regularization for Self-Supervised Learning <pre><code>losses.VICRegLoss(invariance_lambda=25, \n                variance_mu=25, \n                covariance_v=1, \n                eps=1e-4, \n                **kwargs)\n</code></pre></p> <p>Usage:</p> <p>Unlike other loss functions, <code>VICRegLoss</code> does not accept <code>labels</code> or <code>indices_tuple</code>:</p> <pre><code>loss_fn = VICRegLoss()\nloss = loss_fn(embeddings, ref_emb=ref_emb)\n</code></pre> <p>Equations:</p> <p></p> <p>where</p> <p></p> <p></p> <p></p> <p></p> <p>Parameters:</p> <ul> <li>invariance_lambda: The weight of the invariance term.</li> <li>variance_mu: The weight of the variance term.</li> <li>covariance_v: The weight of the covariance term.</li> <li>eps: Small scalar to prevent numerical instability.</li> </ul> <p>Default distance: </p> <ul> <li>Not applicable. You cannot pass in a distance function.</li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul> <p>Reducer input:</p> <ul> <li>invariance_loss: The MSE loss between <code>embeddings[i]</code> and <code>ref_emb[i]</code>. Reduction type is <code>\"element\"</code>.</li> <li>variance_loss1: The variance loss for <code>embeddings</code>. Reduction type is <code>\"element\"</code>.</li> <li>variance_loss2: The variance loss for <code>ref_emb</code>. Reduction type is <code>\"element\"</code>.</li> <li>covariance_loss: The covariance loss. This loss is already reduced to a single value.</li> </ul>"},{"location":"miners/","title":"Miners","text":"<p>Mining functions take a batch of <code>n</code> embeddings and return <code>k</code> pairs/triplets to be used for calculating the loss:</p> <ul> <li>Pair miners output a tuple of size 4: (anchors, positives, anchors, negatives).</li> <li>Triplet miners output a tuple of size 3: (anchors, positives, negatives).</li> <li>Without a tuple miner, loss functions will by default use all possible pairs/triplets in the batch.</li> </ul> <p>You might be familiar with the terminology: \"online\" and \"offline\" miners. These miners are online. Offline miners should be implemented as a PyTorch Sampler.</p> <p>Miners are used with loss functions as follows:</p> <pre><code>from pytorch_metric_learning import miners, losses\nminer_func = miners.SomeMiner()\nloss_func = losses.SomeLoss()\nminer_output = miner_func(embeddings, labels)\nlosses = loss_func(embeddings, labels, miner_output)\n</code></pre>"},{"location":"miners/#angularminer","title":"AngularMiner","text":"<pre><code>miners.AngularMiner(angle=20, **kwargs)\n</code></pre> <p>Parameters</p> <ul> <li>angle: The miner will return triplets that form an angle greater than this input angle. The angle is computed as defined in the angular loss paper</li> </ul> <p>Default distance: </p> <ul> <li> <p><code>LpDistance(p=2, power=1, normalize_embeddings=True)</code></p> <ul> <li>This is the only compatible distance.</li> </ul> </li> </ul>"},{"location":"miners/#baseminer","title":"BaseMiner","text":"<p>All miners extend this class and therefore inherit its <code>__init__</code> parameters. <pre><code>miners.BaseMiner(collect_stats=False, distance=None)\n</code></pre></p> <p>Every miner outputs a tuple of indices:</p> <ul> <li>Pair miners output a tuple of size 4: (anchors, positives, anchors, negatives)</li> <li>Triplet miners output a tuple of size 3: (anchors, positives, negatives) </li> </ul> <p>See custom miners for details on how to write your own miner.</p> <p>Parameters:</p> <ul> <li>collect_stats: If True, will collect various statistics that may be useful to analyze during experiments. If False, these computations will be skipped. Want to make <code>True</code> the default? Set the global COLLECT_STATS flag.</li> <li>distance: A distance object. If None, then the default distance will be used.</li> </ul> <p>Default distance: </p> <ul> <li><code>LpDistance(normalize_embeddings=True, p=2, power=1)</code></li> </ul> <p>Required Implementations: <pre><code># Return indices of some form\ndef mine(self, embeddings, labels, ref_emb, ref_labels):\n    raise NotImplementedError\n</code></pre> Note: by default, <code>embeddings == ref_emb</code> and <code>labels == ref_labels</code>.</p> <pre><code># Validate the output of the miner. \ndef output_assertion(self, output):\n    raise NotImplementedError\n</code></pre>"},{"location":"miners/#batcheasyhardminer","title":"BatchEasyHardMiner","text":"<p>Improved Embeddings with Easy Positive Triplet Mining</p> <p>Returns positive and negative pairs according to the specified <code>pos_strategy</code> and <code>neg_strategy</code>.</p> <p>To implement the loss function described in the paper, use this miner in combination with <code>NTXentLoss(temperature=0.1)</code>.</p> <pre><code>miners.BatchEasyHardMiner(\n        pos_strategy=BatchEasyHardMiner.EASY,\n        neg_strategy=BatchEasyHardMiner.SEMIHARD,\n        allowed_pos_range=None,\n        allowed_neg_range=None,\n        **kwargs\n    ):\n</code></pre> <p>Parameters</p> <ul> <li>pos_strategy: one of the following:<ul> <li><code>BatchEasyHardMiner.HARD</code> or <code>\"hard\"</code>: returns the hardest positive sample per anchor.</li> <li><code>BatchEasyHardMiner.SEMIHARD</code> or <code>\"semihard\"</code>: returns the hardest positive sample per anchor, such that it is closer than the selected negative.</li> <li><code>BatchEasyHardMiner.EASY</code> or <code>\"easy\"</code>: returns the easiest positive sample per anchor</li> <li><code>BatchEasyHardMiner.ALL</code> or <code>\"all\"</code>: returns all possible positive pairs</li> </ul> </li> <li>neg_strategy: one of the following:<ul> <li><code>BatchEasyHardMiner.HARD</code> or <code>\"hard\"</code>: returns the hardest negative sample per anchor.</li> <li><code>BatchEasyHardMiner.SEMIHARD</code> or <code>\"semihard\"</code>: returns the hardest negative sample per anchor, such that it is further than the selected positive.</li> <li><code>BatchEasyHardMiner.EASY</code> or <code>\"easy\"</code>: returns the easiest negative sample per anchor</li> <li><code>BatchEasyHardMiner.ALL</code> or <code>\"all\"</code>: returns all possible negative pairs</li> </ul> </li> <li>allowed_pos_range: Optional tuple containing the allowed range of anchor-positive distances/similarties. For example, <code>allowed_pos_range = (0.2, 1)</code>. If <code>None</code>, then a range is not applied.</li> <li>allowed_neg_range: Optional tuple containing the allowed range of anchor-negative distances/similarties. For example, <code>allowed_neg_range = (0.2, 1)</code>. If <code>None</code>, then a range is not applied.</li> </ul> <p>Restrictions</p> <ul> <li><code>pos_strategy</code> and <code>neg_strategy</code> cannot both be set to <code>\"semihard\"</code></li> <li>If <code>pos_strategy</code> is set to <code>\"semihard\"</code>, then <code>neg_strategy</code> cannot be set to <code>\"all\"</code>, and vice versa.</li> </ul> <p>Default distance: </p> <ul> <li><code>LpDistance(normalize_embeddings=True, p=2, power=1)</code></li> </ul>"},{"location":"miners/#batchhardminer","title":"BatchHardMiner","text":"<p>In Defense of the Triplet Loss for Person Re-Identification</p> <p>For each element in the batch, this miner will find the hardest positive and hardest negative, and use those to form a single triplet. So for a batch size of N, this miner will output N triplets.</p> <p>This miner is equivalent to using <code>miners.BatchEasyHardMiner(pos_strategy=\"hard\", neg_strategy=\"hard\")</code>, and converting the output pairs to triplets.</p> <pre><code>miners.BatchHardMiner(**kwargs)\n</code></pre> <p>Default distance: </p> <ul> <li><code>LpDistance(normalize_embeddings=True, p=2, power=1)</code></li> </ul>"},{"location":"miners/#distanceweightedminer","title":"DistanceWeightedMiner","text":"<p>Implementation of the miner from Sampling Matters in Deep Embedding Learning.  <pre><code>miners.DistanceWeightedMiner(cutoff=0.5, nonzero_loss_cutoff=1.4, **kwargs)\n</code></pre></p> <p>Parameters</p> <ul> <li>cutoff: Pairwise distances are clipped to this value if they fall below it.</li> <li>nonzero_loss_cutoff: Pairs that have distance greater than this are discarded.</li> </ul> <p>Default distance: </p> <ul> <li><code>LpDistance(normalize_embeddings=True, p=2, power=1)</code><ul> <li>This is the only compatible distance.</li> </ul> </li> </ul> <p>Important note:</p> <p>This miner works well only with low dimensionality embeddings (e.g 64-dim) and L2-normalized distances. Check out UniformHistogramMiner for a miner that is roughly equivalent, but works with embeddings of any dimensionality and any distance metric.</p>"},{"location":"miners/#embeddingsalreadypackagedastriplets","title":"EmbeddingsAlreadyPackagedAsTriplets","text":"<p>If your embeddings are already ordered sequentially as triplets, then use this miner to force your loss function to use the already-formed triplets. </p> <p><pre><code>miners.EmbeddingsAlreadyPackagedAsTriplets()\n</code></pre> For example, here's what a batch size of size 6 should look like: <pre><code>torch.stack([anchor1, positive1, negative1, anchor2, positive2, negative2], dim=0)\n</code></pre></p>"},{"location":"miners/#hdcminer","title":"HDCMiner","text":"<p>Hard-Aware Deeply Cascaded Embedding <pre><code>miners.HDCMiner(filter_percentage=0.5, **kwargs)\n</code></pre></p> <p>Parameters:</p> <ul> <li>filter_percentage: The percentage of pairs that will be returned. For example, if filter_percentage is 0.25, then the hardest 25% of pairs will be returned. The pool of pairs is either externally or internally set. See the important methods below for details.</li> </ul> <p>Default distance: </p> <ul> <li><code>LpDistance(normalize_embeddings=True, p=2, power=1)</code></li> </ul> <p>Important methods: <pre><code># Pairs or triplets extracted from another miner, \n# and then passed in to HDCMiner using this function\ndef set_idx_externally(self, external_indices_tuple, labels):\n    self.a1, self.p, self.a2, self.n = lmu.convert_to_pairs(external_indices_tuple, labels)\n    self.was_set_externally = True\n\n# Reset the internal state of the HDCMiner\ndef reset_idx(self):\n    self.a1, self.p, self.a2, self.n = None, None, None, None\n    self.was_set_externally = False\n</code></pre></p> <p>Example of passing another miner output to HDCMiner: <pre><code>minerA = miners.MultiSimilarityMiner(epsilon=0.1)\nminerB = miners.HDCMiner(filter_percentage=0.25)\n\nhard_pairs = minerA(embeddings, labels)\nminerB.set_idx_externally(hard_pairs, labels)\nvery_hard_pairs = minerB(embeddings, labels)\n</code></pre></p>"},{"location":"miners/#multisimilarityminer","title":"MultiSimilarityMiner","text":"<p>Multi-Similarity Loss with General Pair Weighting for Deep Metric Learning</p> <pre><code>miners.MultiSimilarityMiner(epsilon=0.1, **kwargs)\n</code></pre> <p>Parameters</p> <ul> <li>epsilon: <ul> <li>Negative pairs are chosen if they have similarity greater than the hardest positive pair, minus this margin (epsilon). </li> <li>Positive pairs are chosen if they have similarity less than the hardest negative pair, plus this margin (epsilon). </li> </ul> </li> </ul> <p>Default distance: </p> <ul> <li><code>CosineSimilarity()</code></li> </ul>"},{"location":"miners/#pairmarginminer","title":"PairMarginMiner","text":"<p>Returns positive and negative pairs that violate the specified margins. <pre><code>miners.PairMarginMiner(pos_margin=0.2, neg_margin=0.8, **kwargs)\n</code></pre></p> <p>Parameters</p> <ul> <li>pos_margin: The distance (or similarity) over (under) which positive pairs will be chosen.</li> <li>neg_margin: The distance (or similarity) under (over) which negative pairs will be chosen.  </li> </ul> <p>Default distance: </p> <ul> <li><code>LpDistance(normalize_embeddings=True, p=2, power=1)</code></li> </ul>"},{"location":"miners/#tripletmarginminer","title":"TripletMarginMiner","text":"<p>Returns hard, semihard, or all triplets. <pre><code>miners.TripletMarginMiner(margin=0.2, type_of_triplets=\"all\", **kwargs)\n</code></pre></p> <p>Parameters</p> <ul> <li>margin: The difference between the anchor-positive distance and the anchor-negative distance.</li> <li>type_of_triplets: <ul> <li>\"all\" means all triplets that violate the margin</li> <li>\"hard\" is a subset of \"all\", but the negative is closer to the anchor than the positive</li> <li>\"semihard\" is a subset of \"all\", but the negative is further from the anchor than the positive</li> <li>\"easy\" means all triplets that do not violate the margin.</li> </ul> </li> </ul> <p>Default distance: </p> <ul> <li><code>LpDistance(normalize_embeddings=True, p=2, power=1)</code></li> </ul>"},{"location":"miners/#uniformhistogramminer","title":"UniformHistogramMiner","text":"<p>Returns pairs that have uniformly distributed distances. This is like DistanceWeightedMiner, except that it works well with high dimension embeddings, and works with any distance metric (not just L2 normalized distance). <pre><code>miners.UniformHistogramMiner(num_bins=100, \n                            pos_per_bin=10, \n                            neg_per_bin=10, \n                            **kwargs):\n</code></pre></p> <p>Parameters</p> <ul> <li>num_bins: The number of bins to divide the distances into. For example, if the distances for the current batch range from 0 to 2, and num_bins = 100, then each bin will have a width of 0.02.</li> <li>pos_per_bin: The number of positive pairs to mine for each bin.</li> <li>neg_per_bin: The number of negative pairs to mine for each bin.</li> </ul> <p>Default distance: </p> <ul> <li><code>LpDistance(normalize_embeddings=True, p=2, power=1)</code></li> </ul> <p>Example: <pre><code>from pytorch_metric_learning.miners import UniformHistogramMiner\nfrom pytorch_metric_learning.distances import SNRDistance\n\nminer = UniformHistogramMiner(\n    num_bins=100,\n    pos_per_bin=25,\n    neg_per_bin=33,\n    distance=SNRDistance(),\n)\n</code></pre></p> <p>In a given batch, this will:</p> <ul> <li>Divide up the positive distances into 100 bins, and return 25 positive pairs per bin, or 0 if no pairs exist in that bin</li> <li>Divide up the negative distances into 100 bins, and return 33 negative pairs per bin, or 0 if no pairs exist in that bin</li> </ul>"},{"location":"reducers/","title":"Reducers","text":"<p>Reducers specify how to go from many loss values to a single loss value. For example, the ContrastiveLoss computes a loss for every positive and negative pair in a batch. A reducer will take all these per-pair losses, and reduce them to a single value. Here's where reducers fit in this library's flow of filters and computations:</p> <p><code>Your Data --&gt; Sampler --&gt; Miner --&gt; Loss --&gt; Reducer --&gt; Final loss value</code></p> <p>Reducers are passed into loss functions like this: <pre><code>from pytorch_metric_learning import losses, reducers\nreducer = reducers.SomeReducer()\nloss_func = losses.SomeLoss(reducer=reducer)\nloss = loss_func(embeddings, labels) # in your training for-loop\n</code></pre> Internally, the loss function creates a dictionary that contains the losses and other information. The reducer takes this dictionary, performs the reduction, and returns a single value on which <code>.backward()</code> can be called. Most reducers are written such that they can be passed into any loss function.</p>"},{"location":"reducers/#avgnonzeroreducer","title":"AvgNonZeroReducer","text":"<p>This computes the average loss, using only the losses that are greater than 0. For example, if the losses are <code>[0, 2, 0, 3]</code>, then this reducer will return <code>2.5</code>. <pre><code>reducers.AvgNonZeroReducer(**kwargs)\n</code></pre> This class is equivalent to using <code>ThresholdReducer(low=0)</code>. See ThresholdReducer.</p>"},{"location":"reducers/#basereducer","title":"BaseReducer","text":"<p>All reducers extend this class. <pre><code>reducers.BaseReducer(collect_stats=False)\n</code></pre></p> <p>Parameters:</p> <ul> <li>collect_stats: If True, will collect various statistics that may be useful to analyze during experiments. If False, these computations will be skipped. Want to make <code>True</code> the default? Set the global COLLECT_STATS flag.</li> </ul>"},{"location":"reducers/#classweightedreducer","title":"ClassWeightedReducer","text":"<p>This multiplies each loss by a class weight, and then takes the average. <pre><code>reducers.ClassWeightedReducer(weights, **kwargs)\n</code></pre></p> <p>Parameters:</p> <ul> <li>weights: A tensor of weights, where <code>weights[i]</code> is the weight for the ith class.</li> </ul>"},{"location":"reducers/#divisorreducer","title":"DivisorReducer","text":"<p>This divides each loss by a custom value specified inside the loss function. This is useful if you want to hardcode a reduction behavior in your loss function (i.e. by using DivisorReducer), while still having the option to use other reducers. <pre><code>reducers.DivisorReducer(**kwargs)\n</code></pre> To use this reducer, the loss function must include <code>divisor</code> in its loss dictionary. For example, the ProxyAnchorLoss uses <code>DivisorReducer</code> by default, and returns the following dictionary:</p> <pre><code>loss_dict = {\n    \"pos_loss\": {\n        \"losses\": pos_term.squeeze(0),\n        \"indices\": loss_indices,\n        \"reduction_type\": \"element\",\n        \"divisor\": len(with_pos_proxies),\n    },\n    \"neg_loss\": {\n        \"losses\": neg_term.squeeze(0),\n        \"indices\": loss_indices,\n        \"reduction_type\": \"element\",\n        \"divisor\": self.num_classes,\n    },\n}\n</code></pre>"},{"location":"reducers/#donothingreducer","title":"DoNothingReducer","text":"<p>This returns its input. In other words, no reduction is performed. The output will be the loss dictionary that is passed into it. <pre><code>reducers.DoNothingReducer(**kwargs)\n</code></pre></p>"},{"location":"reducers/#meanreducer","title":"MeanReducer","text":"<p>This will return the average of the losses. <pre><code>reducers.MeanReducer(**kwargs)\n</code></pre></p>"},{"location":"reducers/#multiplereducers","title":"MultipleReducers","text":"<p>This wraps multiple reducers. Each reducer is applied to a different sub-loss, as specified in the host loss function. Then the reducer outputs are summed to obtain the final loss. <pre><code>reducers.MultipleReducers(reducers, default_reducer=None, **kwargs)\n</code></pre></p> <p>Parameters:</p> <ul> <li>reducers: A dictionary mapping from strings to reducers. The strings must match sub-loss names of the host loss function.</li> <li>default_reducer: This reducer will be used for any sub-losses that are not included in the keys of <code>reducers</code>. If None, then MeanReducer() will be the default.</li> </ul> <p>Example usage:</p> <p>The ContrastiveLoss has two sub-losses: <code>pos_loss</code> for the positive pairs, and <code>neg_loss</code> for the negative pairs. In this example, a ThresholdReducer is used for the <code>pos_loss</code> and a MeanReducer is used for the <code>neg_loss</code>. <pre><code>from pytorch_metric_learning.losses import ContrastiveLoss\nfrom pytorch_metric_learning.reducers import MultipleReducers, ThresholdReducer, MeanReducer\nreducer_dict = {\"pos_loss\": ThresholdReducer(0.1), \"neg_loss\": MeanReducer()}\nreducer = MultipleReducers(reducer_dict)\nloss_func = ContrastiveLoss(reducer=reducer)\n</code></pre></p>"},{"location":"reducers/#peranchorreducer","title":"PerAnchorReducer","text":"<p>This converts unreduced pairs to unreduced elements. For example, NTXentLoss returns losses per positive pair. If you used PerAnchorReducer with NTXentLoss, then the losses per pair would first be converted to losses per batch element, before being passed to the inner reducer. <pre><code>def aggregation_func(x, num_per_row):\n    zero_denom = num_per_row == 0\n    x = torch.sum(x, dim=1) / num_per_row\n    x[zero_denom] = 0\n    return x\n\nreducers.PerAnchorReducer(reducer=None, \n                            aggregation_func=aggregation_func, \n                            **kwargs):\n</code></pre></p> <p>Parameters:</p> <ul> <li>reducer: The reducer that will be fed per-element losses. The default is MeanReducer</li> <li>aggregation_func: A function that takes in <code>(x, num_per_row)</code> and returns a loss per row of <code>x</code>. The default is the <code>aggregation_func</code> defined in the code snippet above. It returns the mean per row.<ul> <li><code>x</code> is an NxN array of pairwise losses, where N is the batch size.</li> <li><code>num_per_row</code> is a size N array which indicates how many non-zero losses there are per-row of <code>x</code>.</li> </ul> </li> </ul>"},{"location":"reducers/#sumreducer","title":"SumReducer","text":"<p>This will return the sum of the losses. <pre><code>reducers.SumReducer(**kwargs)\n</code></pre></p>"},{"location":"reducers/#thresholdreducer","title":"ThresholdReducer","text":"<p>This computes the average loss, using only the losses that fall within a specified range.</p> <pre><code>reducers.ThresholdReducer(low=None, high=None **kwargs)\n</code></pre> <p>At least one of <code>low</code> or <code>high</code> must be specified.</p> <p>Parameters:</p> <ul> <li>low: Losses less than this value will be ignored.</li> <li>high: Losses greater than this value will be ignored.</li> </ul> <p>Examples:</p> <ul> <li> <p><code>ThresholdReducer(low=6)</code>: the filter is <code>losses &gt; 6</code></p> <ul> <li>If the losses are <code>[3, 7, 1, 13, 5]</code>, then this reducer will return <code>(7+13)/2 = 10</code>.</li> </ul> </li> <li> <p><code>ThresholdReducer(high=6)</code>: the filter is <code>losses &lt; 6</code></p> <ul> <li>If the losses are <code>[3, 7, 1, 13, 5]</code>, then this reducer will return <code>(1+3+5)/3 = 3</code>.</li> </ul> </li> <li> <p><code>ThresholdReducer(low=6, high=12)</code>: the filter is <code>6 &lt; losses &lt; 12</code></p> <ul> <li>If the losses are <code>[3, 7, 1, 13, 5]</code>, then this reducer will return <code>(7)/1 = 7</code>.</li> </ul> </li> </ul>"},{"location":"regularizers/","title":"Regularizers","text":"<p>Regularizers are applied to weights and embeddings without the need for labels or tuples.</p> <p>Here is an example of a weight regularizer being passed to a loss function. <pre><code>from pytorch_metric_learning import losses, regularizers\nR = regularizers.RegularFaceRegularizer()\nloss = losses.ArcFaceLoss(margin=30, num_classes=100, embedding_size=128, weight_regularizer=R)\n</code></pre></p>"},{"location":"regularizers/#baseregularizer","title":"BaseRegularizer","text":"<pre><code>regularizers.BaseWeightRegularizer(collect_stats = False, \n                                reducer = None, \n                                distance = None)\n</code></pre> <p>An object that extends this class can be passed as the <code>embedding_regularizer</code> into any loss function. It can also be passed as the <code>weight_regularizer</code> into any class that extends WeightRegularizerMixin.</p> <p>Parameters</p> <ul> <li>collect_stats: If True, will collect various statistics that may be useful to analyze during experiments. If False, these computations will be skipped. Want to make <code>True</code> the default? Set the global COLLECT_STATS flag.</li> <li>reducer: A reducer object. If None, then the default reducer will be used.</li> <li>distance: A distance object. If None, then the default distance will be used.</li> </ul> <p>Default distance: </p> <ul> <li><code>LpDistance(normalize_embeddings=True, p=2, power=1)</code></li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul>"},{"location":"regularizers/#centerinvariantregularizer","title":"CenterInvariantRegularizer","text":"<p>Deep Face Recognition with Center Invariant Loss</p> <p>This encourages unnormalized embeddings or weights to all have the same Lp norm. <pre><code>regularizers.CenterInvariantRegularizer(**kwargs)\n</code></pre></p> <p>Default distance: </p> <ul> <li><code>LpDistance(normalize_embeddings=False, p=2, power=1)</code><ul> <li>The distance must be <code>LpDistance(normalize_embeddings=False, power=1)</code>. However, <code>p</code> can be changed.</li> </ul> </li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul>"},{"location":"regularizers/#lpregularizer","title":"LpRegularizer","text":"<p>This encourages embeddings/weights to have a small Lp norm. <pre><code>regularizers.LpRegularizer(p=2, power=1, **kwargs)\n</code></pre></p> <p>Parameters</p> <ul> <li>p: The type of norm. For example, <code>p=1</code> is the Manhattan distance, and <code>p=2</code> is Euclidean distance.</li> </ul> <p>Default distance: </p> <ul> <li>This regularizer does not use a distance object, so setting this parameter will have no effect.</li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul>"},{"location":"regularizers/#regularfaceregularizer","title":"RegularFaceRegularizer","text":"<p>RegularFace: Deep Face Recognition via Exclusive Regularization</p> <p>This should be applied as a weight regularizer. It penalizes class vectors that are very close together.</p> <pre><code>regularizers.RegularFaceRegularizer(**kwargs)\n</code></pre> <p>Default distance: </p> <ul> <li><code>CosineSimilarity()</code><ul> <li>Only inverted distances are compatible. For example, <code>DotProductSimilarity()</code> also works.</li> </ul> </li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul>"},{"location":"regularizers/#sparsecentersregularizer","title":"SparseCentersRegularizer","text":"<p>SoftTriple Loss: Deep Metric Learning Without Triplet Sampling</p> <p>This should be applied as a weight regularizer. It encourages multiple class centers to \"merge\", i.e. group together.</p> <pre><code>regularizers.SparseCentersRegularizer(num_classes, centers_per_class, **kwargs)\n</code></pre> <p>Parameters</p> <ul> <li>num_classes: The number of classes in your training dataset.</li> <li>centers_per_class: The number of rows in the weight matrix that correspond to 1 class.</li> </ul> <p>Default distance: </p> <ul> <li><code>CosineSimilarity()</code><ul> <li>This is the only compatible distance.</li> </ul> </li> </ul> <p>Default reducer: </p> <ul> <li>DivisorReducer</li> </ul>"},{"location":"regularizers/#zeromeanregularizer","title":"ZeroMeanRegularizer","text":"<p>Signal-to-Noise Ratio: A Robust Distance Metric for Deep Metric Learning</p> <pre><code>regularizers.ZeroMeanRegularizer(**kwargs)\n</code></pre> <p>Equation</p> <p>In this equation, <code>N</code> is the batch size, <code>M</code> is the size of each embedding.</p> <p></p> <p>Default distance: </p> <ul> <li>This regularizer does not use a distance object, so setting this parameter will have no effect.</li> </ul> <p>Default reducer: </p> <ul> <li>MeanReducer</li> </ul>"},{"location":"samplers/","title":"Samplers","text":"<p>Samplers are just extensions of the torch.utils.data.Sampler class, i.e. they are passed to a PyTorch Dataloader (specifically as the <code>sampler</code> argument, unless otherwise mentioned).  The purpose of samplers is to determine how batches should be formed. This is also where any offline pair or triplet miners should exist.</p>"},{"location":"samplers/#mperclasssampler","title":"MPerClassSampler","text":"<p>At every iteration, this will return <code>m</code> samples per class, assuming that the batch size is a multiple of <code>m</code>. For example, if your dataloader's batch size is 100, and <code>m</code> = 5, then 20 classes with 5 samples each will be returned. Note that if <code>batch_size</code> is not specified, then most batches will have <code>m</code> samples per class, but it's not guaranteed for every batch. <pre><code>samplers.MPerClassSampler(labels, m, batch_size=None, length_before_new_iter=100000)\n</code></pre> Parameters:</p> <ul> <li>labels: The list of labels for your dataset, i.e. the labels[x] should be the label of the xth element in your dataset.</li> <li>m: The number of samples per class to fetch at every iteration. If a class has less than m samples, then there will be duplicates in the returned batch.</li> <li>batch_size: Optional. If specified, then every batch is guaranteed to have <code>m</code> samples per class. There are a few restrictions on this value:<ul> <li><code>batch_size</code> must be a multiple of <code>m</code></li> <li><code>length_before_new_iter &gt;= batch_size</code> must be true</li> <li><code>m * (number of unique labels) &gt;= batch_size</code> must be true</li> </ul> </li> <li>length_before_new_iter: How many iterations will pass before a new iterable is created.</li> </ul>"},{"location":"samplers/#hierarchicalsampler","title":"HierarchicalSampler","text":"<p>Implementation of the sampler used in Deep Metric Learning to Rank.</p> <p>It will do the following per batch:</p> <ul> <li>Randomly select X super classes.</li> <li>For each super class, randomly select Y samples from Z classes, such that Y * Z equals the batch size divided by X.</li> </ul> <p>(X, Y, and the batch size are controllable parameters. See below for details.)</p> <p>This is a BatchSampler, so you should pass it into your dataloader as the <code>batch_sampler</code> parameter.</p> <p><pre><code>samplers.HierarchicalSampler(\n        labels,\n        batch_size,\n        samples_per_class,\n        batches_per_super_tuple=4,\n        super_classes_per_batch=2,\n        inner_label=0,\n        outer_label=1,\n    )\n</code></pre> Parameters:</p> <ul> <li>labels: 2D array, where rows correspond to elements, and columns correspond to the hierarchical labels.</li> <li>batch_size: because this is a BatchSampler the batch size must be specified.<ul> <li><code>batch_size</code> must be a multiple of <code>super_classes_per_batch</code> and <code>samples_per_class</code></li> </ul> </li> <li>samples_per_class: number of samples per class per batch. Corresponds to Y in the above explanation. You can also set this to \"all\" to use all elements of a class, but this is suitable only for few-shot datasets.</li> <li>batches_per_super_tuple: number of batches to create for each tuple of super classes. This affects the length of the iterator returned by the sampler.</li> <li>super_classes_per_batch: the number of super classes per batch. Corresponds to X in the above explanation.</li> <li>inner_label: column index of <code>labels</code> corresponding to classes.</li> <li>outer_label: column index of <code>labels</code> corresponding to super classes.</li> </ul>"},{"location":"samplers/#tuplestoweightssampler","title":"TuplesToWeightsSampler","text":"<p>This is a simple offline miner. It does the following:</p> <ol> <li>Take a random subset of the dataset, if you provide <code>subset_size</code>.</li> <li>Use a specified miner to mine tuples from the subset dataset.</li> <li>Compute weights based on how often each element appears in the mined tuples.</li> <li>Randomly sample, using the weights as probabilities.</li> </ol> <pre><code>samplers.TuplesToWeightsSampler(model, \n                                miner, \n                                dataset, \n                                subset_size=None, \n                                **tester_kwargs)\n</code></pre> <p>Parameters:</p> <ul> <li>model: This model will be used to compute embeddings.</li> <li>miner: This miner will find hard tuples from the computed embeddings.</li> <li>dataset: The dataset you want to sample from.</li> <li>subset_size: Optional. If <code>None</code>, then the entire dataset will be mined, and the iterable will have length <code>len(dataset)</code>. Most likely though, you will run out of memory if you do this. So to avoid that, set <code>subset_size</code> to a number of embeddings that can be passed to the miner without running out of memory. Then a random subset of <code>dataset</code> of size <code>subset_size</code> will be used for mining. The iterable will also have length <code>subset_size</code>.</li> <li>tester_kwargs: Any other keyword options will be passed to BaseTester, which is used internally to compute embeddings. This allows you to set things like <code>dataloader_num_workers</code> etc, if you want to.</li> </ul>"},{"location":"samplers/#fixedsetoftriplets","title":"FixedSetOfTriplets","text":"<p>When initialized, this class creates a fixed set of triplets. This is useful for determining the performance of algorithms in cases where the only ground truth data is a set of triplets. <pre><code>samplers.FixedSetOfTriplets(labels, num_triplets)\n</code></pre></p> <p>Parameters:</p> <ul> <li>labels: The list of labels for your dataset, i.e. the labels[x] should be the label of the xth element in your dataset.</li> <li>num_triplets: The number of triplets to create.</li> </ul>"},{"location":"testers/","title":"Testers","text":"<p>Testers take your model and dataset, and compute nearest-neighbor based accuracy metrics. Note that the testers require the faiss package, which you can install with conda.</p> <p>In general, testers are used as follows: <pre><code>from pytorch_metric_learning import testers\nt = testers.SomeTestingFunction(*args, **kwargs)\ndataset_dict = {\"train\": train_dataset, \"val\": val_dataset}\nall_accuracies = tester.test(dataset_dict, epoch, model)\n\n# Or if your model is composed of a trunk + embedder\nall_accuracies = tester.test(dataset_dict, epoch, trunk, embedder)\n</code></pre> You can perform custom actions by writing an end-of-testing hook (see the documentation for BaseTester), and you can access the test results directly via the <code>all_accuracies</code> attribute: <pre><code>def end_of_testing_hook(tester):\n    print(tester.all_accuracies)\n</code></pre> This will print out a dictionary of accuracy metrics, per dataset split. You'll see something like this: <pre><code>{\"train\": {\"AMI_level0\": 0.53, ...}, \"val\": {\"AMI_level0\": 0.44, ...}}\n</code></pre> Each of the accuracy metric names is appended with <code>level0</code>, which refers to the 0th label hierarchy level (see the documentation for BaseTester). This is only relevant if you're dealing with multi-label datasets.</p> <p>For an explanation of the default accuracy metrics, see the AccuracyCalculator documentation.</p>"},{"location":"testers/#testing-splits","title":"Testing splits","text":"<p>By default, every dataset in <code>dataset_dict</code> will be evaluated using itself as the query and reference (on which to find nearest neighbors). More flexibility is allowed with the optional argument <code>splits_to_eval</code> taken by <code>tester.test()</code>. <code>splits_to_eval</code> is a list of <code>(query_split, [list_of_reference_splits])</code> tuples.</p> <p>For example, let's say your <code>dataset_dict</code> has two keys: <code>\"dataset_a\"</code> and <code>\"train\"</code>.</p> <ul> <li>The default <code>splits_to_eval = None</code> is equivalent to:  <pre><code>splits_to_eval = [('dataset_a', ['dataset_a']), ('train', ['train'])]\n</code></pre></li> <li><code>dataset_a</code> as the query, and <code>train</code> as the reference:  <pre><code>splits_to_eval = [('dataset_a', ['train'])]\n</code></pre></li> <li><code>dataset_a</code> as the query, and <code>dataset_a</code> + <code>train</code> as the reference:  <pre><code>splits_to_eval = [('dataset_a', ['dataset_a', 'train'])]\n</code></pre></li> </ul>"},{"location":"testers/#basetester","title":"BaseTester","text":"<p>All trainers extend this class and therefore inherit its <code>__init__</code> arguments. <pre><code>testers.BaseTester(normalize_embeddings=True,\n                    use_trunk_output=False,\n                    batch_size=32,\n                    dataloader_num_workers=2,\n                    pca=None,\n                    data_device=None,\n                    dtype=None,\n                    data_and_label_getter=None,\n                    label_hierarchy_level=0,\n                    end_of_testing_hook=None,\n                    dataset_labels=None,\n                    set_min_label_to_zero=False,\n                    accuracy_calculator=None,\n                    visualizer=None,\n                    visualizer_hook=None,)\n</code></pre></p> <p>Parameters:</p> <ul> <li>normalize_embeddings: If True, embeddings will be normalized to Euclidean norm of 1 before nearest neighbors are computed.</li> <li>use_trunk_output: If True, the output of the trunk_model will be used to compute nearest neighbors, i.e. the output of the embedder model will be ignored.</li> <li>batch_size: How many dataset samples to process at each iteration when computing embeddings.</li> <li>dataloader_num_workers: How many processes the dataloader will use.</li> <li>pca: The number of dimensions that your embeddings will be reduced to, using PCA. The default is None, meaning PCA will not be applied.</li> <li>data_device: Which gpu to use for the loaded dataset samples. If None, then the gpu or cpu will be used (whichever is available).</li> <li>dtype: The type that the dataset output will be converted to, e.g. <code>torch.float16</code>. If set to <code>None</code>, then no type casting will be done.</li> <li>data_and_label_getter: A function that takes the output of your dataset's <code>__getitem__</code> function, and returns a tuple of (data, labels). If None, then it is assumed that <code>__getitem__</code> returns (data, labels). </li> <li>label_hierarchy_level: If each sample in your dataset has multiple labels, then this integer argument can be used to select which \"level\" to use. This assumes that your labels are \"2-dimensional\" with shape (num_samples, num_hierarchy_levels). Leave this at the default value, 0, if your data does not have multiple labels per sample.</li> <li>end_of_testing_hook: This is an optional function that has one input argument (the tester object) and performs some action (e.g. logging data) at the end of testing.<ul> <li>You'll probably want to access the accuracy metrics, which are stored in <code>tester.all_accuracies</code>. This is a nested dictionary with the following format: <code>tester.all_accuracies[split_name][metric_name] = metric_value</code></li> <li>If you want ready-to-use hooks, take a look at the logging_presets module.</li> </ul> </li> <li>dataset_labels: The labels for your dataset. Can be 1-dimensional (1 label per datapoint) or 2-dimensional, where each row represents a datapoint, and the columns are the multiple labels that the datapoint has. Labels can be integers or strings. This option needs to be specified only if <code>set_min_label_to_zero</code> is True.</li> <li>set_min_label_to_zero: If True, labels will be mapped such that they represent their rank in the label set. For example, if your dataset has labels 5, 10, 12, 13, then at each iteration, these would become 0, 1, 2, 3. You should also set this to True if you want to use string labels. In that case, 'dog', 'cat', 'monkey' would get mapped to 1, 0, 2. If True, you must pass in <code>dataset_labels</code> (see above). The default is False.</li> <li>accuracy_calculator: Optional. An object that extends AccuracyCalculator. This will be used to compute the accuracy of your model. By default, AccuracyCalculator is used.</li> <li>visualizer: Optional. An object that has implemented the <code>fit_transform</code> method, as done by UMAP and many scikit-learn functions. For example, you can set <code>visualizer = umap.UMAP()</code>. The object's <code>fit_transform</code> function should take in a 2D array of embeddings, and reduce the dimensionality, such that calling <code>visualizer.fit_transform(embeddings)</code> results in a 2D array of size (N, 2).</li> <li>visualizer_hook: Optional. This function will be passed the following args. You can do whatever you want in this function, but the reason it exists is to allow you to save a plot of the embeddings etc.<ul> <li>visualizer: The visualizer object that you passed in.</li> <li>embeddings: The dimensionality reduced embeddings.</li> <li>label: The corresponding labels for each embedding.</li> <li>split_name: The name of the split (train, val, etc.)</li> <li>keyname: The name of the dictionary key where the embeddings and labels are stored.</li> <li>epoch: The epoch for which the embeddings are being computed.</li> </ul> </li> </ul> <p>Functions:</p> <ul> <li><code>tester.test</code></li> </ul> <p>Call this to test your model on a dataset dict. It returns a dictionary of accuracies.</p> <pre><code>all_accuracies = tester.test(\n    dataset_dict, # dictionary mapping strings to datasets\n    epoch, # used for logging\n    trunk_model, # your model\n    embedder_model=None, # by default this will be a no-op\n    splits_to_eval=None,\n    collate_fn=None # custom collate_fn for the dataloader\n)\n</code></pre> <ul> <li><code>tester.get_all_embeddings</code></li> </ul> <p>Returns all the embeddings and labels for the input dataset and model.</p> <pre><code>embeddings, labels = tester.get_all_embeddings(\n    dataset, # Any pytorch dataset\n    trunk_model, # your model\n    embedder_model=None, # by default this will be a no-op\n    collate_fn=None, # custom collate_fn for the dataloader\n    eval=True, # set models to eval mode\n    return_as_numpy=False\n )\n</code></pre>"},{"location":"testers/#globalembeddingspacetester","title":"GlobalEmbeddingSpaceTester","text":"<p>Computes nearest neighbors by looking at all points in the embedding space (rather than a subset). This is probably the tester you are looking for. To see it in action, check one of the example notebooks <pre><code>testers.GlobalEmbeddingSpaceTester(*args, **kwargs)\n</code></pre></p>"},{"location":"testers/#withsameparentlabeltester","title":"WithSameParentLabelTester","text":"<p>This assumes there is a label hierarchy. For each sample, the search space is narrowed by only looking at sibling samples, i.e. samples with the same parent label. For example, consider a dataset with 4 fine-grained classes {cat, dog, car, truck}, and 2 coarse-grained classes {animal, vehicle}. The nearest neighbor search for cats and dogs will consist of animals, and the nearest-neighbor search for cars and trucks will consist of vehicles. <pre><code>testers.WithSameParentLabelTester(*args, **kwargs)\n</code></pre></p>"},{"location":"testers/#globaltwostreamembeddingspacetester","title":"GlobalTwoStreamEmbeddingSpaceTester","text":"<p>This is the corresponding tester for TwoStreamMetricLoss. The supplied dataset must return <code>(anchor, positive, label)</code>. <pre><code>testers.GlobalTwoStreamEmbeddingSpaceTester(*args, **kwargs)\n</code></pre> Requirements:</p> <p>This tester only supports the default value for <code>splits_to_eval</code>: each split is used for both query and reference</p>"},{"location":"trainers/","title":"Trainers","text":"<p>Trainers exist in this library because some metric learning algorithms are more than just loss or mining functions. Some algorithms require additional networks, data augmentations, learning rate schedules etc. The goal of the trainers module is to provide access to these type of metric learning algorithms. </p> <p>In general, trainers are used as follows: <pre><code>from pytorch_metric_learning import trainers\nt = trainers.SomeTrainingFunction(*args, **kwargs)\nt.train(num_epochs=10)\n</code></pre></p>"},{"location":"trainers/#basetrainer","title":"BaseTrainer","text":"<p>All trainers extend this class and therefore inherit its <code>__init__</code> arguments. <pre><code>trainers.BaseTrainer(models,\n                    optimizers,\n                    batch_size,\n                    loss_funcs,\n                    dataset,\n                    mining_funcs=None,\n                    iterations_per_epoch=None,\n                    data_device=None,\n                    dtype=None,\n                    loss_weights=None,\n                    sampler=None,\n                    collate_fn=None,\n                    lr_schedulers=None,\n                    gradient_clippers=None,\n                    freeze_these=(),\n                    freeze_trunk_batchnorm=False,\n                    label_hierarchy_level=0,\n                    dataloader_num_workers=2,\n                    data_and_label_getter=None,\n                    dataset_labels=None,\n                    set_min_label_to_zero=False,\n                    end_of_iteration_hook=None,\n                    end_of_epoch_hook=None)\n</code></pre></p> <p>Parameters:</p> <ul> <li>models: A dictionary of the form: <ul> <li>{\"trunk\": trunk_model, \"embedder\": embedder_model}</li> <li>The \"embedder\" key is optional.</li> </ul> </li> <li>optimizers: A dictionary mapping strings to optimizers. The base class does not require any specific keys. For example, you could provide an empty dictionary, in which case no optimization will happen. Or you could provide just an optimizer for your trunk_model. But most likely, you'll want to pass in: <ul> <li>{\"trunk_optimizer\": trunk_optimizer, \"embedder_optimizer\": embedder_optimizer}.</li> </ul> </li> <li>batch_size: The number of elements that are retrieved at each iteration.</li> <li>loss_funcs: A dictionary mapping strings to loss functions. The required keys depend on the training method, but all methods are likely to require at least: <ul> <li>{\"metric_loss\": loss_func}.</li> </ul> </li> <li>dataset: The dataset you want to train on. Note that training methods do not perform validation, so do not pass in your validation or test set.</li> <li>mining_funcs: A dictionary mapping strings to mining functions. Pass in an empty dictionary, or one or more of the following keys: <ul> <li>{\"subset_batch_miner\": mining_func1, \"tuple_miner\": mining_func2}</li> </ul> </li> <li>data_device: The device that you want to put batches of data on. If not specified, the trainer will put the data on any available GPUs.</li> <li>dtype: The type that the dataset output will be converted to, e.g. <code>torch.float16</code>. If set to <code>None</code>, then no type casting will be done.</li> <li>iterations_per_epoch: Optional. <ul> <li>If you don't specify <code>iterations_per_epoch</code>:<ul> <li>1 epoch = 1 pass through the dataloader iterator. If <code>sampler=None</code>, then 1 pass through the iterator is 1 pass through the dataset. </li> <li>If you use a sampler, then 1 pass through the iterator is 1 pass through the iterable returned by the sampler.</li> </ul> </li> <li>For samplers like <code>MPerClassSampler</code> or some offline mining method, the iterable returned might be very long or very short etc, and might not be related to the length of the dataset. The length of the epoch might vary each time the sampler creates a new iterable. In these cases, it can be useful to specify <code>iterations_per_epoch</code> so that each \"epoch\" is just a fixed number of iterations. The definition of epoch matters because there's various things like LR schedulers and hooks that depend on an epoch ending.</li> </ul> </li> <li>loss_weights: A dictionary mapping loss names to numbers. Each loss will be multiplied by the corresponding value in the dictionary. If not specified, then no loss weighting will occur. If not specified, then the original labels are used.</li> <li>sampler: The sampler used by the dataloader. If not specified, then random sampling will be used.</li> <li>collate_fn: The collate function used by the dataloader.</li> <li>lr_schedulers: A dictionary of PyTorch learning rate schedulers. Your keys should be strings of the form <code>&lt;model&gt;_&lt;step_type&gt;</code>, where <code>&lt;model&gt;</code> is a key that comes from either the <code>models</code> or <code>loss_funcs</code> dictionary, and <code>&lt;step_type&gt;</code> is one of the following:<ul> <li>\"scheduler_by_iteration\" (will be stepped at every iteration)</li> <li>\"scheduler_by_epoch\" (will be stepped at the end of each epoch)</li> <li>\"scheduler_by_plateau\" (will step if accuracy plateaus. This requires you to write your own end-of-epoch hook, compute validation accuracy, and call <code>trainer.step_lr_plateau_schedulers(validation_accuracy)</code>. Or you can use HookContainer.)</li> <li>Here are some example valid <code>lr_scheduler</code> keys: <ul> <li><code>trunk_scheduler_by_iteration</code></li> <li><code>metric_loss_scheduler_by_epoch</code></li> <li><code>embedder_scheduler_by_plateau</code></li> </ul> </li> </ul> </li> <li>gradient_clippers: A dictionary of gradient clipping functions. Each function will be called before the optimizers.</li> <li>freeze_these: Optional. A list or tuple of the names of models or loss functions that should have their parameters frozen during training. These models will have <code>requires_grad</code> set to False, and their optimizers will not be stepped. </li> <li>freeze_trunk_batchnorm: If True, then the BatchNorm parameters of the trunk model will be frozen during training.</li> <li>label_hierarchy_level: If each sample in your dataset has multiple labels, then this integer argument can be used to select which \"level\" to use. This assumes that your labels are \"2-dimensional\" with shape (num_samples, num_hierarchy_levels). Leave this at the default value, 0, if your data does not have multiple labels per sample.</li> <li>dataloader_num_workers: The number of processes your dataloader will use to load data.</li> <li>data_and_label_getter: A function that takes the output of your dataset's <code>__getitem__</code> function, and returns a tuple of (data, labels). If None, then it is assumed that <code>__getitem__</code> returns (data, labels). </li> <li>dataset_labels: The labels for your dataset. Can be 1-dimensional (1 label per datapoint) or 2-dimensional, where each row represents a datapoint, and the columns are the multiple labels that the datapoint has. Labels can be integers or strings. This option needs to be specified only if <code>set_min_label_to_zero</code> is True.</li> <li>set_min_label_to_zero: If True, labels will be mapped such that they represent their rank in the label set. For example, if your dataset has labels 5, 10, 12, 13, then at each iteration, these would become 0, 1, 2, 3. You should also set this to True if you want to use string labels. In that case, 'dog', 'cat', 'monkey' would get mapped to 1, 0, 2. If True, you must pass in <code>dataset_labels</code> (see above). The default is False.</li> <li>end_of_iteration_hook: This is an optional function that has one input argument (the trainer object), and performs some action (e.g. logging data) at the end of every iteration. Here are some things you might want to log:<ul> <li><code>trainer.losses</code>: this dictionary contains all loss values at the current iteration. </li> <li><code>trainer.loss_funcs</code> and <code>trainer.mining_funcs</code>: these dictionaries contain the loss and mining functions. <ul> <li>Some loss and mining functions have attributes called <code>_record_these</code> or <code>_record_these_stats</code>. These are lists of names of other attributes that might be useful to log. (The list of attributes might change depending on the value of COLLECT_STATS.) For example, the <code>_record_these_stats</code> list for <code>BaseMiner</code> is <code>[\"num_pos_pairs\", \"num_neg_pairs\", \"num_triplets\"]</code>, so at each iteration you could log the value of <code>trainer.mining_funcs[\"tuple_miner\"].num_pos_pairs</code>. To accomplish this programmatically, you can use record-keeper. Or you can do it yourself: first check if the object has <code>_record_these</code> or <code>_record_these_stats</code>, and use the python function <code>getattr</code> to retrieve the specified attributes. </li> </ul> </li> <li>If you want ready-to-use hooks, take a look at the logging_presets module.</li> </ul> </li> <li>end_of_epoch_hook: This is an optional function that operates like <code>end_of_iteration_hook</code>, except this occurs at the end of every epoch, so this might be a suitable place to run validation and save models. <ul> <li>To end training early, your hook should return the boolean value False. Note, it must specifically <code>return False</code>, not <code>None</code>, <code>0</code>, <code>[]</code> etc.</li> <li>For this hook, you might want to access the following dictionaries: <code>trainer.models</code>, <code>trainer.optimizers</code>, <code>trainer.lr_schedulers</code>, <code>trainer.loss_funcs</code>, and <code>trainer.mining_funcs</code>.</li> <li>If you want ready-to-use hooks, take a look at the logging_presets module.</li> </ul> </li> </ul>"},{"location":"trainers/#metriclossonly","title":"MetricLossOnly","text":"<p>This trainer just computes a metric loss from the output of your embedder network. See the example notebook. <pre><code>trainers.MetricLossOnly(*args, **kwargs)\n</code></pre></p> <p>Requirements:</p> <ul> <li>models: Must have the following form:<ul> <li>{\"trunk\": trunk_model}</li> <li>Optionally include \"embedder\": embedder_model</li> </ul> </li> <li>loss_funcs: Must have the following form:<ul> <li>{\"metric_loss\": loss_func}</li> </ul> </li> </ul>"},{"location":"trainers/#trainwithclassifier","title":"TrainWithClassifier","text":"<p>This trainer is for the case where your architecture is trunk -&gt; embedder -&gt; classifier. It applies a metric loss to the output of the embedder network, and a classification loss to the output of the classifier network. See the example notebook. <pre><code>trainers.TrainWithClassifier(*args, **kwargs)\n</code></pre> Requirements:</p> <ul> <li>models: Must have the following form: <ul> <li>{\"trunk\": trunk_model, \"classifier\": classifier_model}</li> <li>Optionally include \"embedder\": embedder_model</li> </ul> </li> <li>loss_funcs: Must have the following form:<ul> <li>{\"metric_loss\": loss_func1, \"classifier_loss\": loss_func2}</li> </ul> </li> </ul>"},{"location":"trainers/#cascadedembeddings","title":"CascadedEmbeddings","text":"<p>This trainer is a generalization of Hard-Aware Deeply Cascaded Embedding. It splits the output of your embedder network, computing a separate loss for each section. In other words, the output of your embedder should be the concatenation of your cascaded models. See the example notebook.</p> <pre><code>trainers.CascadedEmbeddings(embedding_sizes, *args, **kwargs)\n</code></pre> <p>Parameters:</p> <ul> <li>embedding_sizes: A list of integers, which represent the size of the output of each cascaded model.</li> </ul> <p>Requirements:</p> <ul> <li> <p>models: Must have the following form:</p> <ul> <li>{\"trunk\": trunk_model}<ul> <li>Optionally include \"embedder\": embedder_model</li> <li>Optionally include key:values of the form \"classifier_%d\": classifier_model_%d. The integer appended to \"classifier_\" represents the cascaded model that the classifier will be appended to. For example, if the dictionary has classifier_0 and classifier_2, then the 0th and 2nd cascaded models will have classifier_model_0 and classifier_model_2 appended to them.</li> </ul> </li> </ul> </li> <li> <p>loss_funcs: Must have the following form:</p> <ul> <li>{\"metric_loss_%d\": metric_loss_func_%d}<ul> <li>Optionally include key:values of the form \"classifier_loss_%d\": classifier_loss_func_%d. The appended integer represents which cascaded model the loss applies to.</li> </ul> </li> </ul> </li> <li> <p>mining_funcs: Must have the following form:</p> <ul> <li>{\"tuple_miner_%d\": mining_func_%d}<ul> <li>Optionally include \"subset_batch_miner\": subset_batch_miner</li> </ul> </li> </ul> </li> </ul>"},{"location":"trainers/#deepadversarialmetriclearning","title":"DeepAdversarialMetricLearning","text":"<p>This is an implementation of Deep Adversarial Metric Learning. See the example notebook. <pre><code>trainers.DeepAdversarialMetricLearning(metric_alone_epochs=0,\n                                    g_alone_epochs=0,\n                                    g_triplets_per_anchor=100,\n                                    *args,\n                                    **kwargs):\n</code></pre></p> <p>Parameters:</p> <ul> <li>metric_alone_epochs: At the beginning of training, this many epochs will consist of only the metric_loss.</li> <li>g_alone_epochs: After metric_alone_epochs, this many epochs will consist of only the adversarial generator loss.</li> <li>g_triplets_per_anchor: The number of real triplets per sample that should be passed into the generator. For each real triplet, the generator will output a synthetic triplet.</li> </ul> <p>Requirements:</p> <ul> <li> <p>models: Must have the following form:</p> <ul> <li>{\"trunk\": trunk_model, \"generator\": generator_model}<ul> <li>Optionally include \"embedder\": embedder_model</li> <li>Optionally include \"classifier\": classifier_model</li> <li>The input size to the generator must be 3*(size of trunk_model output). The output size must be (size of trunk_model output).</li> </ul> </li> </ul> </li> <li> <p>loss_funcs: Must have the following form:</p> <ul> <li>{\"metric_loss\": metric_loss, \"g_adv_loss\": g_adv_loss, \"synth_loss\": synth_loss}<ul> <li>Optionally include \"classifier_loss\": classifier_loss</li> <li>metric_loss applies to the embeddings of real data.</li> <li>g_adv_loss is the adversarial generator loss. Currently, only TripletMarginLoss is supported</li> <li>synth_loss applies to the embeddings of the synthetic generator triplets.</li> </ul> </li> </ul> </li> <li> <p>loss_weights: Must be one of the following:</p> <ul> <li>None</li> <li>{\"metric_loss\": weight1, \"g_adv_loss\": weight2, \"synth_loss\": weight3, \"g_reg_loss\": weight4, \"g_hard_lss\": weight5}<ul> <li>Optionally include \"classifier_loss\": classifier_loss</li> <li>\"g_reg_loss\" and \"g_hard_loss\" refer to the regularization losses described in the paper.</li> </ul> </li> </ul> </li> </ul>"},{"location":"trainers/#twostreammetricloss","title":"TwoStreamMetricLoss","text":"<p>This trainer is the same as MetricLossOnly but operates on separate streams of anchors and positives/negatives. The supplied dataset must return <code>(anchor, positive, label)</code>. Given a batch of <code>(anchor, positive, label)</code>, triplets are formed using <code>anchor</code> as the anchor, and <code>positive</code> as either the positive or negative. See the example notebook. <pre><code>trainers.TwoStreamMetricLoss(*args, **kwargs)\n</code></pre> Requirements:</p> <ul> <li>models: Must have the following form:<ul> <li>{\"trunk\": trunk_model}</li> <li>Optionally include \"embedder\": embedder_model</li> </ul> </li> <li>loss_funcs: Must have the following form:<ul> <li>{\"metric_loss\": loss_func}</li> </ul> </li> <li>mining_funcs: Only tuple miners are supported</li> </ul>"},{"location":"extend/losses/","title":"How to write custom loss functions","text":""},{"location":"extend/losses/#the-simplest-possible-loss-function","title":"The simplest possible loss function","text":"<pre><code>from pytorch_metric_learning.losses import BaseMetricLossFunction\nimport torch\n\nclass BarebonesLoss(BaseMetricLossFunction):\n    def compute_loss(self, embeddings, labels, indices_tuple, ref_emb, ref_labels):\n        # perform some calculation #\n        some_loss = torch.mean(embeddings)\n\n        # put into dictionary #\n        return {\n            \"loss\": {\n                \"losses\": some_loss,\n                \"indices\": None,\n                \"reduction_type\": \"already_reduced\",\n            }\n        }\n</code></pre>"},{"location":"extend/losses/#compatability-with-distances-and-reducers","title":"Compatability with distances and reducers","text":"<p>You can make your loss function a lot more powerful by adding support for distance metrics and reducers:</p> <pre><code>from pytorch_metric_learning.losses import BaseMetricLossFunction\nfrom pytorch_metric_learning.reducers import AvgNonZeroReducer\nfrom pytorch_metric_learning.distances import CosineSimilarity\nfrom pytorch_metric_learning.utils import loss_and_miner_utils as lmu\nimport torch\n\nclass FullFeaturedLoss(BaseMetricLossFunction):\n    def compute_loss(self, embeddings, labels, indices_tuple, ref_emb, ref_labels):\n        indices_tuple = lmu.convert_to_triplets(indices_tuple, labels)\n        anchors, positives, negatives = indices_tuple\n        if len(anchors) == 0:\n            return self.zero_losses()\n\n        mat = self.distance(embeddings)\n        ap_dists = mat[anchors, positives]\n        an_dists = mat[anchors, negatives]\n\n        # perform some calculations #\n        losses1 = ap_dists - an_dists\n        losses2 = ap_dists * 5\n        losses3 = torch.mean(embeddings)\n\n        # put into dictionary #\n        return {\n            \"loss1\": {\n                \"losses\": losses1,\n                \"indices\": indices_tuple,\n                \"reduction_type\": \"triplet\",\n            },\n            \"loss2\": {\n                \"losses\": losses2,\n                \"indices\": (anchors, positives),\n                \"reduction_type\": \"pos_pair\",\n            },\n            \"loss3\": {\n                \"losses\": losses3,\n                \"indices\": None,\n                \"reduction_type\": \"already_reduced\",\n            },\n        }\n\n    def get_default_reducer(self):\n        return AvgNonZeroReducer()\n\n    def get_default_distance(self):\n        return CosineSimilarity()\n\n    def _sub_loss_names(self):\n        return [\"loss1\", \"loss2\", \"loss3\"]\n</code></pre> <p>Here are a few details about this loss function:</p> <ul> <li>It operates on triplets, so <code>convert_to_triplets</code> is used to convert <code>indices_tuple</code> to triplet form.</li> <li><code>self.distance</code> returns a pairwise distance matrix</li> <li>The output of the loss function is a dictionary that contains multiple sub losses. This is why it overrides the <code>_sub_loss_names</code> function.</li> <li><code>get_default_reducer</code> is overriden to use <code>AvgNonZeroReducer</code> by default, rather than <code>MeanReducer</code>.</li> <li><code>get_default_distance</code> is overriden to use <code>CosineSimilarity</code> by default, rather than <code>LpDistances(p=2)</code>.</li> </ul>"},{"location":"extend/losses/#more-on-distances","title":"More on distances","text":"<p>To make your loss compatible with inverted distances (like cosine similarity), you can check <code>self.distance.is_inverted</code>, and write whatever logic necessary to make your loss make sense in that context. </p> <p>There are also a few functions in <code>self.distance</code> that provide some of this logic, specifically <code>self.distance.smallest_dist</code>, <code>self.distance.largest_dist</code>, and <code>self.distance.margin</code>. The function definitions are pretty straightforward, and you can find them here.</p>"},{"location":"extend/losses/#using-indices_tuple","title":"Using <code>indices_tuple</code>","text":"<p>This is an optional argument passed in from the outside. (See the overview for an example.) It currently has 3 possible forms: </p> <ul> <li><code>None</code></li> <li>A tuple of size 4, representing the indices of mined pairs (anchors, positives, anchors, negatives)</li> <li>A tuple of size 3, representing the indices of mined triplets (anchors, positives, negatives)</li> </ul> <p>To use <code>indices_tuple</code>, use the appropriate conversion function. You don't need to know what type will be passed in, as the conversion function takes care of that:</p> <pre><code>from pytorch_metric_learning.utils import loss_and_miner_utils as lmu\n\n# For a pair based loss\n# After conversion, indices_tuple will be a tuple of size 4\nindices_tuple = lmu.convert_to_pairs(indices_tuple, labels)\n\n# For a triplet based loss\n# After conversion, indices_tuple will be a tuple of size 3\nindices_tuple = lmu.convert_to_triplets(indices_tuple, labels)\n\n# For a classification based loss\n# miner_weights.shape == labels.shape\n# You can use these to weight your loss\nminer_weights = lmu.convert_to_weights(indices_tuple, labels, dtype=torch.float32)\n</code></pre>"},{"location":"extend/losses/#reduction-type","title":"Reduction type","text":"<p>The purpose of reduction types is to provide extra information to the reducer, if it needs it. For example, you could write a reducer that behaves differently depending on what kind of loss it receives. Here's a summary of each reduction type:</p> Reduction type Meaning Shape of \"indices\" \"triplet\" Each entry in \"losses\" represents a triplet. A tuple of 3 tensors (anchors, positives, negatives), each of size (N,). \"pos_pair\" Each entry in \"losses\" represents a positive pair. A tuple of 2 tensors (anchors, positives), each of size (N,). \"neg_pair\" Each entry in \"losses\" represents a negative pair. A tuple of 2 tensors (anchors, negatives), each of size (N,). \"element\" Each entry in \"losses\" represents something other than a tuple, e.g. an element in a batch. A tensor of size (N,) \"already_reduced\" \"losses\" is a single number, i.e. the loss has already been reduced. Should be <code>None</code>"},{"location":"extend/losses/#some-useful-examples-to-look-at","title":"Some useful examples to look at","text":"<p>Here are some existing loss functions that might be useful for reference:</p> <ul> <li>ContrastiveLoss</li> <li>MultiSimilarityLoss</li> <li>NormalizedSoftmaxLoss</li> </ul>"},{"location":"extend/miners/","title":"How to write custom mining functions","text":"<ol> <li>Extend <code>BaseMiner</code></li> <li>Implement the <code>mine</code> method</li> <li>Inside <code>mine</code>, return a tuple of tensors</li> </ol>"},{"location":"extend/miners/#an-example-pair-miner","title":"An example pair miner","text":"<pre><code>from pytorch_metric_learning.miners import BaseMiner\nfrom pytorch_metric_learning.utils import loss_and_miner_utils as lmu\n\nclass ExamplePairMiner(BaseMiner):\n    def __init__(self, margin=0.1, **kwargs):\n        super().__init__(**kwargs)\n        self.margin = margin\n\n    def mine(self, embeddings, labels, ref_emb, ref_labels):\n        mat = self.distance(embeddings, ref_emb)\n        a1, p, a2, n = lmu.get_all_pairs_indices(labels, ref_labels)\n        pos_pairs = mat[a1, p]\n        neg_pairs = mat[a2, n]\n        pos_mask = (\n            pos_pairs &lt; self.margin\n            if self.distance.is_inverted\n            else pos_pairs &gt; self.margin\n        )\n        neg_mask = (\n            neg_pairs &gt; self.margin\n            if self.distance.is_inverted\n            else neg_pairs &lt; self.margin\n        )\n        return a1[pos_mask], p[pos_mask], a2[neg_mask], n[neg_mask]\n</code></pre> <p>The <code>ExamplePairMiner</code> does the following:</p> <ul> <li>Computes the distance matrix between <code>embeddings</code> and <code>ref_emb</code>.</li> <li>Finds the indices of all positive and negative pairs</li> <li>Returns the indices of pairs that violate the margin</li> </ul> <p>Example usage:</p> <pre><code>miner = ExamplePairMiner()\nembeddings = torch.randn(128, 512)\nlabels = torch.randint(0, 10, size=(128,))\npairs = miner(embeddings, labels)\n</code></pre>"},{"location":"extend/miners/#an-example-triplet-miner","title":"An example triplet miner","text":"<pre><code>from pytorch_metric_learning.miners import BaseMiner\nfrom pytorch_metric_learning.utils import loss_and_miner_utils as lmu\n\nclass ExampleTripletMiner(BaseMiner):\n    def __init__(self, margin=0.1, **kwargs):\n        super().__init__(**kwargs)\n        self.margin = margin\n\n    def mine(self, embeddings, labels, ref_emb, ref_labels):\n        mat = self.distance(embeddings, ref_emb)\n        a, p, n = lmu.get_all_triplets_indices(labels, ref_labels)\n        pos_pairs = mat[a, p]\n        neg_pairs = mat[a, n]\n        triplet_margin = pos_pairs - neg_pairs if self.distance.is_inverted else neg_pairs - pos_pairs\n        triplet_mask = triplet_margin &lt;= self.margin\n        return a[triplet_mask], p[triplet_mask], n[triplet_mask]\n</code></pre> <p>This miner works similarly to <code>ExamplePairMiner</code>, but finds triplets instead of pairs.</p>"},{"location":"extend/miners/#what-is-ref_emb","title":"What is <code>ref_emb</code>?","text":"<p>The forward function of <code>BaseMiner</code> has optional <code>ref_emb</code> and <code>ref_labels</code> arguments. The miner should return anchors from <code>embeddings</code> and positives and negatives from <code>ref_emb</code>. For example:</p> <pre><code>miner = ExamplePairMiner()\nembeddings = torch.randn(128, 512)\nlabels = torch.randint(0, 10, size=(128,))\nref_emb = torch.randn(32, 512)\nref_labels = torch.randint(0, 10, size=(32,))\na1, p, a2, n = miner(embeddings, labels, ref_emb, ref_labels)\n# a1 and a2 contain indices of \"embeddings\"\n# p and n contain indices of \"ref_emb\"\n</code></pre> <p>Typically though, <code>ref_emb</code> and <code>ref_labels</code> are left to their default value of <code>None</code>, in which case they are set to <code>embeddings</code> and <code>labels</code> before being passed to the <code>mine</code> function.</p>"}]}